{"ast":null,"code":"import _classCallCheck from \"/home/dilip/Desktop/iuvdx-core/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/dilip/Desktop/iuvdx-core/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/dilip/Desktop/iuvdx-core/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/dilip/Desktop/iuvdx-core/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/dilip/Desktop/iuvdx-core/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/home/dilip/Desktop/iuvdx-core/client/src/components/stream/OvVideo.js\";\nimport React, { Component } from 'react';\nimport './StreamComponent.css';\n\nvar OvVideoComponent = /*#__PURE__*/function (_Component) {\n  _inherits(OvVideoComponent, _Component);\n\n  var _super = _createSuper(OvVideoComponent);\n\n  function OvVideoComponent(props) {\n    var _this;\n\n    _classCallCheck(this, OvVideoComponent);\n\n    _this = _super.call(this, props);\n    _this.videoRef = React.createRef();\n    _this.toggleFullscreen = _this.toggleFullscreen.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(OvVideoComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      if (this.props && this.props.user.streamManager && !!this.videoRef) {\n        console.log('PROPS: ', this.props);\n        this.props.user.getStreamManager().addVideoElement(this.videoRef.current);\n      }\n\n      if (this.props && this.props.user.streamManager.session && this.props.user && !!this.videoRef) {\n        this.props.user.streamManager.session.on('signal:userChanged', function (event) {\n          var data = JSON.parse(event.data);\n\n          if (data.isScreenShareActive !== undefined) {\n            _this2.props.user.getStreamManager().addVideoElement(_this2.videoRef.current);\n          }\n        });\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(props) {\n      if (props && !!this.videoRef) {\n        this.props.user.getStreamManager().addVideoElement(this.videoRef.current);\n      }\n    }\n  }, {\n    key: \"toggleFullscreen\",\n    value: function toggleFullscreen() {\n      var document = window.document;\n      var fs = document.getElementById('video-' + this.props.user.getStreamManager().stream.streamId);\n\n      if (!document.fullscreenElement && !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement) {\n        if (fs.requestFullscreen) {\n          fs.requestFullscreen();\n        } else if (fs.msRequestFullscreen) {\n          fs.msRequestFullscreen();\n        } else if (fs.mozRequestFullScreen) {\n          fs.mozRequestFullScreen();\n        } else if (fs.webkitRequestFullscreen) {\n          fs.webkitRequestFullscreen();\n        }\n      } else {\n        if (document.exitFullscreen) {\n          document.exitFullscreen();\n        } else if (document.msExitFullscreen) {\n          document.msExitFullscreen();\n        } else if (document.mozCancelFullScreen) {\n          document.mozCancelFullScreen();\n        } else if (document.webkitExitFullscreen) {\n          document.webkitExitFullscreen();\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"video\", {\n        controls: true,\n        autoPlay: true,\n        id: 'video-' + this.props.user.getStreamManager().stream.streamId,\n        ref: this.videoRef,\n        muted: this.props.mutedSound,\n        onDoubleClick: this.toggleFullscreen,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }\n      });\n    }\n  }]);\n\n  return OvVideoComponent;\n}(Component);\n\nexport { OvVideoComponent as default };","map":{"version":3,"sources":["/home/dilip/Desktop/iuvdx-core/client/src/components/stream/OvVideo.js"],"names":["React","Component","OvVideoComponent","props","videoRef","createRef","toggleFullscreen","bind","user","streamManager","console","log","getStreamManager","addVideoElement","current","session","on","event","data","JSON","parse","isScreenShareActive","undefined","document","window","fs","getElementById","stream","streamId","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","msFullscreenElement","requestFullscreen","msRequestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","exitFullscreen","msExitFullscreen","mozCancelFullScreen","webkitExitFullscreen","mutedSound"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './StreamComponent.css';\n\nexport default class OvVideoComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.videoRef = React.createRef();\n        this.toggleFullscreen = this.toggleFullscreen.bind(this);\n    }\n\n    componentDidMount() {\n        if (this.props && this.props.user.streamManager && !!this.videoRef) {\n            console.log('PROPS: ', this.props);\n            this.props.user.getStreamManager().addVideoElement(this.videoRef.current);\n        }\n\n        if (this.props && this.props.user.streamManager.session && this.props.user && !!this.videoRef) {\n            this.props.user.streamManager.session.on('signal:userChanged', (event) => {\n                const data = JSON.parse(event.data);\n                if (data.isScreenShareActive !== undefined) {\n                    this.props.user.getStreamManager().addVideoElement(this.videoRef.current);\n                }\n            });\n        }\n    }\n\n    componentDidUpdate(props) {\n        if (props && !!this.videoRef) {\n            this.props.user.getStreamManager().addVideoElement(this.videoRef.current);\n        }\n    }\n\n    toggleFullscreen() {\n        const document = window.document;\n        const fs = document.getElementById('video-' + this.props.user.getStreamManager().stream.streamId);\n        if (\n            !document.fullscreenElement &&\n            !document.mozFullScreenElement &&\n            !document.webkitFullscreenElement &&\n            !document.msFullscreenElement\n        ) {\n            if (fs.requestFullscreen) {\n                fs.requestFullscreen();\n            } else if (fs.msRequestFullscreen) {\n                fs.msRequestFullscreen();\n            } else if (fs.mozRequestFullScreen) {\n                fs.mozRequestFullScreen();\n            } else if (fs.webkitRequestFullscreen) {\n                fs.webkitRequestFullscreen();\n            }\n        } else {\n            if (document.exitFullscreen) {\n                document.exitFullscreen();\n            } else if (document.msExitFullscreen) {\n                document.msExitFullscreen();\n            } else if (document.mozCancelFullScreen) {\n                document.mozCancelFullScreen();\n            } else if (document.webkitExitFullscreen) {\n                document.webkitExitFullscreen();\n            }\n        }\n    }\n\n    render() {\n        return (\n            <video\n                controls\n                autoPlay={true}\n                id={'video-' + this.props.user.getStreamManager().stream.streamId}\n                ref={this.videoRef}\n                muted={this.props.mutedSound}\n                onDoubleClick={this.toggleFullscreen}\n            />\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}