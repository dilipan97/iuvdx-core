{"ast":null,"code":"import _classCallCheck from \"/home/dilip/Desktop/iuvdx-core-old/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/dilip/Desktop/iuvdx-core-old/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/dilip/Desktop/iuvdx-core-old/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/dilip/Desktop/iuvdx-core-old/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/dilip/Desktop/iuvdx-core-old/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/home/dilip/Desktop/iuvdx-core-old/client/src/components/video-room/VideoRoomComponent.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport './VideoRoomComponent.css';\nimport { OpenVidu } from 'openvidu-browser';\nimport StreamComponent from '../stream/StreamComponent';\nimport DialogExtensionComponent from '../dialog-extension/DialogExtension';\nimport ChatComponent from '../chat/ChatComponent';\nimport OpenViduLayout from '../../layout/openvidu-layout';\nimport UserModel from '../../models/user-model';\nimport ToolbarComponent from '../toolbar/ToolbarComponent';\nimport IpCameraComponent from '../ip-camera/IpCameraComponent';\nimport IpcamServerComponent from '../ipcam-server/IpcamServerComponent';\nimport IpCamModel from '../../models/ipcam-model';\nimport { config } from '../Constants';\nvar localUser = new UserModel();\n\nvar screen_share = require('../../assets/images/screen.png');\n\nvar VideoRoomComponent = /*#__PURE__*/function (_Component) {\n  _inherits(VideoRoomComponent, _Component);\n\n  var _super = _createSuper(VideoRoomComponent);\n\n  function VideoRoomComponent(props) {\n    var _this;\n\n    _classCallCheck(this, VideoRoomComponent);\n\n    _this = _super.call(this, props);\n    _this.OPENVIDU_SERVER_URL = config.OPENVIDU_SERVER_URL;\n    _this.OPENVIDU_SERVER_SECRET = config.OPENVIDU_SERVER_SECRET;\n    _this.hasBeenUpdated = false;\n    _this.layout = new OpenViduLayout();\n\n    var sessionName = _this.props.match.params.value.replace(/-/g, '');\n\n    var userName = _this.props.user ? _this.props.user : 'IUDX_User' + Math.floor(Math.random() * 100);\n    _this.state = {\n      mySessionId: sessionName,\n      myUserName: userName,\n      session: undefined,\n      localUser: undefined,\n      subscribers: [],\n      ipCamSubscribers: [],\n      chatDisplay: 'none',\n      modalOpen: false,\n      localUserOn: false,\n      groupDisplay: true\n    };\n    _this.joinSession = _this.joinSession.bind(_assertThisInitialized(_this));\n    _this.leaveSession = _this.leaveSession.bind(_assertThisInitialized(_this));\n    _this.onbeforeunload = _this.onbeforeunload.bind(_assertThisInitialized(_this));\n    _this.updateLayout = _this.updateLayout.bind(_assertThisInitialized(_this));\n    _this.camStatusChanged = _this.camStatusChanged.bind(_assertThisInitialized(_this));\n    _this.micStatusChanged = _this.micStatusChanged.bind(_assertThisInitialized(_this));\n    _this.nicknameChanged = _this.nicknameChanged.bind(_assertThisInitialized(_this));\n    _this.toggleFullscreen = _this.toggleFullscreen.bind(_assertThisInitialized(_this));\n    _this.screenShare = _this.screenShare.bind(_assertThisInitialized(_this));\n    _this.stopScreenShare = _this.stopScreenShare.bind(_assertThisInitialized(_this));\n    _this.closeDialogExtension = _this.closeDialogExtension.bind(_assertThisInitialized(_this));\n    _this.toggleChat = _this.toggleChat.bind(_assertThisInitialized(_this));\n    _this.checkNotification = _this.checkNotification.bind(_assertThisInitialized(_this));\n    _this.checkSize = _this.checkSize.bind(_assertThisInitialized(_this));\n    _this.showIPCameraDialog = _this.showIPCameraDialog.bind(_assertThisInitialized(_this));\n    _this.showIPCameraServerDialog = _this.showIPCameraServerDialog.bind(_assertThisInitialized(_this));\n    _this.setClose = _this.setClose.bind(_assertThisInitialized(_this));\n    _this.getIPToken = _this.getIPToken.bind(_assertThisInitialized(_this));\n    _this.removeCamera = _this.removeCamera.bind(_assertThisInitialized(_this));\n    _this.groupStatusChanged = _this.groupStatusChanged.bind(_assertThisInitialized(_this));\n    _this.leaveSessionPage = _this.leaveSessionPage.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(VideoRoomComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var openViduLayoutOptions = {\n        maxRatio: 3 / 2,\n        // The narrowest ratio that will be used (default 2x3)\n        minRatio: 9 / 16,\n        // The widest ratio that will be used (default 16x9)\n        fixedRatio: false,\n        // If this is true then the aspect ratio of the video is maintained and minRatio and maxRatio are ignored (default false)\n        bigClass: 'OV_big',\n        // The class to add to elements that should be sized bigger\n        bigPercentage: 0.8,\n        // The maximum percentage of space the big ones should take up\n        bigFixedRatio: false,\n        // fixedRatio for the big ones\n        bigMaxRatio: 3 / 2,\n        // The narrowest ratio to use for the big elements (default 2x3)\n        bigMinRatio: 9 / 16,\n        // The widest ratio to use for the big elements (default 16x9)\n        bigFirst: true,\n        // Whether to place the big one in the top left (true) or bottom right\n        animate: true // Whether you want to animate the transitions\n\n      };\n      this.layout.initLayoutContainer(document.getElementById('layout'), openViduLayoutOptions);\n      window.addEventListener('beforeunload', this.onbeforeunload);\n      window.addEventListener('resize', this.updateLayout);\n      window.addEventListener('resize', this.checkSize);\n      this.joinSession();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener('beforeunload', this.onbeforeunload);\n      window.removeEventListener('resize', this.updateLayout);\n      window.removeEventListener('resize', this.checkSize);\n      this.leaveSession();\n    }\n  }, {\n    key: \"onbeforeunload\",\n    value: function onbeforeunload(event) {\n      this.leaveSession();\n    }\n  }, {\n    key: \"joinSession\",\n    value: function joinSession() {\n      var _this2 = this;\n\n      this.OV = new OpenVidu();\n      this.setState({\n        session: this.OV.initSession()\n      }, function () {\n        _this2.subscribeToStreamCreated();\n\n        _this2.connectToSession();\n      });\n    }\n  }, {\n    key: \"connectToSession\",\n    value: function connectToSession() {\n      var _this3 = this;\n\n      if (this.props.token !== undefined) {\n        console.log('token received: ', this.props.token);\n        this.connect(this.props.token);\n      } else {\n        this.getToken().then(function (token) {\n          console.log(token);\n\n          _this3.connect(token);\n        }).catch(function (error) {\n          if (_this3.props.error) {\n            _this3.props.error({\n              error: error.error,\n              messgae: error.message,\n              code: error.code,\n              status: error.status\n            });\n          }\n\n          console.log('There was an error getting the token:', error.code, error.message);\n          alert('There was an error getting the token:', error.message);\n        });\n      }\n    }\n  }, {\n    key: \"connect\",\n    value: function connect(token) {\n      var _this4 = this;\n\n      this.state.session.connect(token, {\n        clientData: this.state.myUserName\n      }).then(function () {\n        _this4.connectWebCam();\n      }).catch(function (error) {\n        if (_this4.props.error) {\n          _this4.props.error({\n            error: error.error,\n            messgae: error.message,\n            code: error.code,\n            status: error.status\n          });\n        }\n\n        alert('There was an error connecting to the session:', error.message);\n        console.log('There was an error connecting to the session:', error.code, error.message);\n      });\n    }\n  }, {\n    key: \"connectWebCam\",\n    value: function connectWebCam() {\n      var _this5 = this;\n\n      var publisher = this.OV.initPublisher(undefined, {\n        audioSource: undefined,\n        videoSource: undefined,\n        publishAudio: localUser.isAudioActive(),\n        publishVideo: localUser.isVideoActive(),\n        resolution: '640x480',\n        frameRate: 30,\n        insertMode: 'APPEND'\n      });\n\n      if (this.state.session.capabilities.publish) {\n        this.state.session.publish(publisher).then(function () {\n          if (_this5.props.joinSession) {\n            _this5.props.joinSession();\n          }\n        });\n      }\n\n      localUser.setNickname(this.state.myUserName);\n      localUser.setConnectionId(this.state.session.connection.connectionId);\n      localUser.setScreenShareActive(false);\n      localUser.setStreamManager(publisher);\n      this.subscribeToUserChanged();\n      this.subscribeToStreamDestroyed();\n      this.sendSignalUserChanged({\n        isScreenShareActive: localUser.isScreenShareActive()\n      });\n      this.setState({\n        localUser: localUser\n      }, function () {\n        _this5.state.localUser.getStreamManager().on('streamPlaying', function (e) {\n          _this5.updateLayout();\n\n          publisher.videos[0].video.parentElement.classList.remove('custom-class');\n        });\n      });\n    }\n  }, {\n    key: \"leaveSession\",\n    value: function leaveSession(e) {\n      var mySession = this.state.session;\n\n      if (mySession) {\n        mySession.disconnect();\n      } // Empty all properties...\n\n\n      this.OV = null;\n      this.setState({\n        session: undefined,\n        subscribers: [],\n        ipCamSubscribers: [],\n        mySessionId: 'SessionA',\n        myUserName: 'IUDX_User' + Math.floor(Math.random() * 100),\n        localUser: undefined,\n        chatDisplay: 'none',\n        modalOpen: false,\n        serverModalOpen: false,\n        localUserOn: false,\n        groupDisplay: true\n      });\n      localUser.setAudioActive(true);\n      localUser.setVideoActive(false);\n      localUser.setGroupActive(true);\n\n      if (this.props.leaveSession) {\n        this.props.leaveSession();\n      }\n    }\n  }, {\n    key: \"leaveSessionPage\",\n    value: function leaveSessionPage() {\n      this.props.history.goBack();\n    }\n  }, {\n    key: \"camStatusChanged\",\n    value: function camStatusChanged() {\n      localUser.setVideoActive(!localUser.isVideoActive());\n      localUser.getStreamManager().publishVideo(localUser.isVideoActive());\n      this.sendSignalUserChanged({\n        isVideoActive: localUser.isVideoActive()\n      });\n      this.setState({\n        localUser: localUser\n      });\n      this.setState({\n        localUserOn: !this.state.localUserOn\n      });\n    }\n  }, {\n    key: \"micStatusChanged\",\n    value: function micStatusChanged() {\n      localUser.setAudioActive(!localUser.isAudioActive());\n      localUser.getStreamManager().publishAudio(localUser.isAudioActive());\n      this.sendSignalUserChanged({\n        isAudioActive: localUser.isAudioActive()\n      });\n      this.setState({\n        localUser: localUser\n      });\n    }\n  }, {\n    key: \"nicknameChanged\",\n    value: function nicknameChanged(nickname) {\n      var localUser = this.state.localUser;\n      localUser.setNickname(nickname);\n      this.setState({\n        localUser: localUser\n      });\n      this.sendSignalUserChanged({\n        nickname: this.state.localUser.getNickname()\n      });\n    }\n  }, {\n    key: \"deleteSubscriber\",\n    value: function deleteSubscriber(stream) {\n      if (stream.typeOfVideo === 'IPCAM') {\n        var remoteCams = this.state.ipCamSubscribers;\n        var camStream = remoteCams.filter(function (user) {\n          return user.getStreamManager().stream === stream;\n        })[0];\n        var index = remoteCams.indexOf(camStream, 0);\n\n        if (index > -1) {\n          remoteCams.splice(index, 1);\n          this.setState({\n            ipCamSubscribers: remoteCams\n          });\n        }\n      } else {\n        var remoteUsers = this.state.subscribers;\n        var userStream = remoteUsers.filter(function (user) {\n          return user.getStreamManager().stream === stream;\n        })[0];\n\n        var _index = remoteUsers.indexOf(userStream, 0);\n\n        if (_index > -1) {\n          remoteUsers.splice(_index, 1);\n          this.setState({\n            subscribers: remoteUsers\n          });\n        }\n      }\n    }\n  }, {\n    key: \"subscribeToStreamCreated\",\n    value: function subscribeToStreamCreated() {\n      var _this6 = this;\n\n      this.state.session.on('streamCreated', function (event) {\n        var subscriber = _this6.state.session.subscribe(event.stream, undefined);\n\n        if (event.stream.typeOfVideo === 'IPCAM') {\n          var ipCamSubscribers = _this6.state.ipCamSubscribers;\n          subscriber.on('streamPlaying', function (e) {\n            subscriber.videos[0].video.parentElement.classList.remove('custom-class');\n          });\n          var newCam = new IpCamModel();\n          newCam.setStreamManager(subscriber);\n          newCam.setConnectionId(event.stream.connection.connectionId);\n          newCam.setType('ipcam');\n          newCam.setNickname(event.stream.connection.data);\n          ipCamSubscribers.push(newCam);\n\n          _this6.setState({\n            ipCamSubscribers: ipCamSubscribers\n          }, function () {\n            if (_this6.state.localUser) {\n              _this6.sendSignalUserChanged({\n                isAudioActive: _this6.state.localUser.isAudioActive(),\n                isVideoActive: _this6.state.localUser.isVideoActive(),\n                nickname: _this6.state.localUser.getNickname(),\n                isScreenShareActive: _this6.state.localUser.isScreenShareActive()\n              });\n            }\n\n            _this6.updateLayout();\n          });\n        } else {\n          var subscribers = _this6.state.subscribers;\n          subscriber.on('streamPlaying', function (e) {\n            _this6.checkSomeoneShareScreen();\n\n            subscriber.videos[0].video.parentElement.classList.remove('custom-class');\n          });\n          var newUser = new UserModel();\n          newUser.setStreamManager(subscriber);\n          newUser.setConnectionId(event.stream.connection.connectionId);\n          newUser.setType('remote');\n          var nickname = event.stream.connection.data.split('%')[0];\n          newUser.setNickname(JSON.parse(nickname).clientData);\n          subscribers.push(newUser);\n\n          _this6.setState({\n            subscribers: subscribers\n          }, function () {\n            if (_this6.state.localUser) {\n              _this6.sendSignalUserChanged({\n                isAudioActive: _this6.state.localUser.isAudioActive(),\n                isVideoActive: _this6.state.localUser.isVideoActive(),\n                nickname: _this6.state.localUser.getNickname(),\n                isScreenShareActive: _this6.state.localUser.isScreenShareActive()\n              });\n            }\n\n            _this6.updateLayout();\n          });\n        }\n      });\n    }\n  }, {\n    key: \"subscribeToStreamDestroyed\",\n    value: function subscribeToStreamDestroyed() {\n      var _this7 = this;\n\n      // On every Stream destroyed...\n      this.state.session.on('streamDestroyed', function (event) {\n        // Remove the stream from 'subscribers' array\n        _this7.deleteSubscriber(event.stream);\n\n        setTimeout(function () {\n          _this7.checkSomeoneShareScreen();\n        }, 20);\n        event.preventDefault();\n\n        _this7.updateLayout();\n      });\n    }\n  }, {\n    key: \"subscribeToUserChanged\",\n    value: function subscribeToUserChanged() {\n      var _this8 = this;\n\n      this.state.session.on('signal:userChanged', function (event) {\n        var remoteUsers = _this8.state.subscribers;\n        remoteUsers.forEach(function (user) {\n          if (user.getConnectionId() === event.from.connectionId) {\n            var data = JSON.parse(event.data);\n            console.log('EVENTO REMOTE: ', event.data);\n\n            if (data.isAudioActive !== undefined) {\n              user.setAudioActive(data.isAudioActive);\n            }\n\n            if (data.isVideoActive !== undefined) {\n              user.setVideoActive(data.isVideoActive);\n            }\n\n            if (data.nickname !== undefined) {\n              user.setNickname(data.nickname);\n            }\n\n            if (data.isScreenShareActive !== undefined) {\n              user.setScreenShareActive(data.isScreenShareActive);\n            }\n          }\n        });\n\n        _this8.setState({\n          subscribers: remoteUsers\n        }, function () {\n          return _this8.checkSomeoneShareScreen();\n        });\n      });\n    }\n  }, {\n    key: \"updateLayout\",\n    value: function updateLayout() {\n      var _this9 = this;\n\n      setTimeout(function () {\n        _this9.layout.updateLayout();\n      }, 20);\n    }\n  }, {\n    key: \"sendSignalUserChanged\",\n    value: function sendSignalUserChanged(data) {\n      var signalOptions = {\n        data: JSON.stringify(data),\n        type: 'userChanged'\n      };\n      this.state.session.signal(signalOptions);\n    }\n  }, {\n    key: \"toggleFullscreen\",\n    value: function toggleFullscreen() {\n      var document = window.document;\n      var fs = document.getElementById('container');\n\n      if (!document.fullscreenElement && !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement) {\n        if (fs.requestFullscreen) {\n          fs.requestFullscreen();\n        } else if (fs.msRequestFullscreen) {\n          fs.msRequestFullscreen();\n        } else if (fs.mozRequestFullScreen) {\n          fs.mozRequestFullScreen();\n        } else if (fs.webkitRequestFullscreen) {\n          fs.webkitRequestFullscreen();\n        }\n      } else {\n        if (document.exitFullscreen) {\n          document.exitFullscreen();\n        } else if (document.msExitFullscreen) {\n          document.msExitFullscreen();\n        } else if (document.mozCancelFullScreen) {\n          document.mozCancelFullScreen();\n        } else if (document.webkitExitFullscreen) {\n          document.webkitExitFullscreen();\n        }\n      }\n    }\n  }, {\n    key: \"screenShare\",\n    value: function screenShare() {\n      var _this10 = this;\n\n      var videoSource = navigator.userAgent.indexOf('Firefox') !== -1 ? 'window' : 'screen';\n      var publisher = this.OV.initPublisher(undefined, {\n        videoSource: videoSource,\n        publishAudio: localUser.isAudioActive(),\n        publishVideo: localUser.isVideoActive(),\n        mirror: false\n      }, function (error) {\n        if (error && error.name === 'SCREEN_EXTENSION_NOT_INSTALLED') {\n          _this10.setState({\n            showExtensionDialog: true\n          });\n        } else if (error && error.name === 'SCREEN_SHARING_NOT_SUPPORTED') {\n          alert('Your browser does not support screen sharing');\n        } else if (error && error.name === 'SCREEN_EXTENSION_DISABLED') {\n          alert('You need to enable screen sharing extension');\n        } else if (error && error.name === 'SCREEN_CAPTURE_DENIED') {\n          alert('You need to choose a window or application to share');\n        }\n      });\n      publisher.once('accessAllowed', function () {\n        _this10.state.session.unpublish(localUser.getStreamManager());\n\n        localUser.setStreamManager(publisher);\n\n        _this10.state.session.publish(localUser.getStreamManager()).then(function () {\n          localUser.setScreenShareActive(true);\n\n          _this10.setState({\n            localUser: localUser\n          }, function () {\n            _this10.sendSignalUserChanged({\n              isScreenShareActive: localUser.isScreenShareActive()\n            });\n          });\n        });\n      });\n      publisher.on('streamPlaying', function () {\n        _this10.updateLayout();\n\n        publisher.videos[0].video.parentElement.classList.remove('custom-class');\n      });\n    }\n  }, {\n    key: \"closeDialogExtension\",\n    value: function closeDialogExtension() {\n      this.setState({\n        showExtensionDialog: false\n      });\n    }\n  }, {\n    key: \"stopScreenShare\",\n    value: function stopScreenShare() {\n      this.state.session.unpublish(localUser.getStreamManager());\n      this.connectWebCam();\n    }\n  }, {\n    key: \"groupStatusChanged\",\n    value: function groupStatusChanged() {\n      localUser.setGroupActive(!this.state.groupDisplay);\n      this.sendSignalUserChanged({\n        isGroupActive: localUser.isGroupActive()\n      });\n      this.setState({\n        groupDisplay: !this.state.groupDisplay\n      });\n    }\n  }, {\n    key: \"checkSomeoneShareScreen\",\n    value: function checkSomeoneShareScreen() {\n      var isScreenShared; // return true if at least one passes the test\n\n      isScreenShared = this.state.subscribers.some(function (user) {\n        return user.isScreenShareActive();\n      }) || localUser.isScreenShareActive();\n      var openviduLayoutOptions = {\n        maxRatio: 3 / 2,\n        minRatio: 9 / 16,\n        fixedRatio: isScreenShared,\n        bigClass: 'OV_big',\n        bigPercentage: 0.8,\n        bigFixedRatio: false,\n        bigMaxRatio: 3 / 2,\n        bigMinRatio: 9 / 16,\n        bigFirst: true,\n        animate: true\n      };\n      this.layout.setLayoutOptions(openviduLayoutOptions);\n      this.updateLayout();\n    }\n  }, {\n    key: \"toggleChat\",\n    value: function toggleChat(property) {\n      var display = property;\n\n      if (display === undefined) {\n        display = this.state.chatDisplay === 'none' ? 'block' : 'none';\n      }\n\n      if (display === 'block') {\n        this.setState({\n          chatDisplay: display,\n          messageReceived: false\n        });\n      } else {\n        console.log('chat', display);\n        this.setState({\n          chatDisplay: display\n        });\n      }\n\n      this.updateLayout();\n    }\n  }, {\n    key: \"checkNotification\",\n    value: function checkNotification(event) {\n      this.setState({\n        messageReceived: this.state.chatDisplay === 'none'\n      });\n    }\n  }, {\n    key: \"checkSize\",\n    value: function checkSize() {\n      if (document.getElementById('layout').offsetWidth <= 700 && !this.hasBeenUpdated) {\n        this.toggleChat('none');\n        this.hasBeenUpdated = true;\n      }\n\n      if (document.getElementById('layout').offsetWidth > 700 && this.hasBeenUpdated) {\n        this.hasBeenUpdated = false;\n      }\n    }\n  }, {\n    key: \"showIPCameraDialog\",\n    value: function showIPCameraDialog() {\n      this.setState({\n        modalOpen: !this.state.modalOpen\n      });\n    }\n  }, {\n    key: \"showIPCameraServerDialog\",\n    value: function showIPCameraServerDialog() {\n      this.setState({\n        serverModalOpen: !this.state.serverModalOpen\n      });\n    }\n  }, {\n    key: \"setClose\",\n    value: function setClose() {\n      this.setState({\n        modalOpen: !this.state.modalOpen\n      });\n    }\n  }, {\n    key: \"setServerClose\",\n    value: function setServerClose() {\n      this.setState({\n        serverModalOpen: !this.state.serverModalOpen\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this11 = this;\n\n      var mySessionId = this.state.mySessionId;\n      var localUser = this.state.localUser;\n      var chatDisplay = {\n        display: this.state.chatDisplay\n      };\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"container\",\n        id: \"container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 543,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(ToolbarComponent, {\n        sessionId: mySessionId,\n        user: localUser,\n        showNotification: this.state.messageReceived,\n        camStatusChanged: this.camStatusChanged,\n        micStatusChanged: this.micStatusChanged,\n        groupStatusChanged: this.groupStatusChanged,\n        screenShare: this.screenShare,\n        stopScreenShare: this.stopScreenShare,\n        toggleFullscreen: this.toggleFullscreen,\n        leaveSessionPage: this.leaveSessionPage,\n        toggleChat: this.toggleChat,\n        showIPCameraDialog: this.showIPCameraDialog,\n        showIPCameraServerDialog: this.showIPCameraServerDialog,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 544,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(DialogExtensionComponent, {\n        showDialog: this.state.showExtensionDialog,\n        cancelClicked: this.closeDialogExtension,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 560,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(IpCameraComponent, {\n        open: this.state.modalOpen,\n        setClose: this.setClose,\n        getToken: this.getIPToken,\n        removeCam: this.removeCamera,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 561,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(IpcamServerComponent, {\n        open: this.state.serverModalOpen,\n        setClose: this.setServerClose,\n        getToken: this.getIPToken,\n        removeCam: this.removeCamera,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 562,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        id: \"layout\",\n        className: \"bounds\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 565,\n          columnNumber: 17\n        }\n      }, this.state.localUserOn && localUser !== undefined && localUser.getStreamManager() !== undefined && (localUser.isScreenShareActive() ? /*#__PURE__*/React.createElement(\"div\", {\n        id: \"screenshare\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 568,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"ul\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 569,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"li\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 570,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        alt: \"Screen Sharing\",\n        src: screen_share,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 570,\n          columnNumber: 41\n        }\n      })), /*#__PURE__*/React.createElement(\"li\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 571,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 571,\n          columnNumber: 41\n        }\n      }, \"You're presenting to everyone\")))) : /*#__PURE__*/React.createElement(\"div\", {\n        className: \"OT_root OT_publisher custom-class\",\n        id: \"localUser\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 575,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(StreamComponent, {\n        user: localUser,\n        handleNickname: this.nicknameChanged,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 576,\n          columnNumber: 33\n        }\n      }))), this.state.groupDisplay && this.state.subscribers.map(function (sub, i) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          key: i,\n          className: \"OT_root OT_publisher custom-class\",\n          id: \"remoteUsers\",\n          __self: _this11,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 581,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(StreamComponent, {\n          user: sub,\n          streamId: sub.streamManager.stream.streamId,\n          __self: _this11,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 582,\n            columnNumber: 29\n          }\n        }));\n      }), this.state.ipCamSubscribers.map(function (sub, i) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          key: i,\n          className: \"OT_root OT_publisher custom-class\",\n          id: \"remoteCam\",\n          __self: _this11,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 586,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(StreamComponent, {\n          user: sub,\n          streamId: sub.streamManager.stream.streamId,\n          __self: _this11,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 587,\n            columnNumber: 29\n          }\n        }));\n      }), localUser !== undefined && localUser.getStreamManager() !== undefined && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"OT_root OT_publisher custom-class\",\n        style: chatDisplay,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 591,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(ChatComponent, {\n        user: localUser,\n        chatDisplay: this.state.chatDisplay,\n        close: this.toggleChat,\n        messageReceived: this.checkNotification,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 592,\n          columnNumber: 29\n        }\n      }))));\n    }\n    /**\n     * --------------------------\n     * SERVER-SIDE RESPONSIBILITY\n     * --------------------------\n     * These methods retrieve the mandatory user token from OpenVidu Server.\n     * This behaviour MUST BE IN YOUR SERVER-SIDE IN PRODUCTION (by using\n     * the API REST, openvidu-java-client or openvidu-node-client):\n     *   1) Initialize a session in OpenVidu Server\t(POST /api/sessions)\n     *   2) Generate a token in OpenVidu Server\t\t(POST /api/tokens)\n     *   3) The token must be consumed in Session.connect() method\n     */\n\n  }, {\n    key: \"getIPToken\",\n    value: function getIPToken(cameras) {\n      var sendData = {\n        session: this.state.mySessionId,\n        cameras: cameras\n      };\n      var headers = {\n        'Content-Type': 'application/json'\n      };\n      axios.post('/ipcam', sendData, {\n        headers\n      }).then(function (response) {\n        console.log('connection success!');\n      }).catch(function (error) {\n        return console.log(error);\n      });\n    }\n  }, {\n    key: \"removeCamera\",\n    value: function removeCamera(camName) {\n      var sendData = {\n        session: this.state.mySessionId,\n        camera: camName\n      };\n      var headers = {\n        'Content-Type': 'application/json'\n      };\n      axios.post('/deleteipcam', sendData, {\n        headers\n      }).then(function (response) {\n        console.log('Disconnection success!');\n      }).catch(function (error) {\n        return console.log(error);\n      });\n    }\n  }, {\n    key: \"getToken\",\n    value: function getToken() {\n      var _this12 = this;\n\n      return this.createSession(this.state.mySessionId).then(function (sessionId) {\n        return _this12.createToken(sessionId);\n      });\n    }\n  }, {\n    key: \"createSession\",\n    value: function createSession(sessionId) {\n      var _this13 = this;\n\n      return new Promise(function (resolve, reject) {\n        var data = JSON.stringify({\n          customSessionId: sessionId\n        });\n        axios.post(_this13.OPENVIDU_SERVER_URL + '/openvidu/api/sessions', data, {\n          headers: {\n            Authorization: 'Basic ' + btoa('OPENVIDUAPP:' + _this13.OPENVIDU_SERVER_SECRET),\n            'Content-Type': 'application/json'\n          }\n        }).then(function (response) {\n          console.log('CREATE SESION', response);\n          resolve(response.data.id);\n        }).catch(function (response) {\n          var error = Object.assign({}, response);\n\n          if (error.response && error.response.status === 409) {\n            resolve(sessionId);\n          } else {\n            console.log(error);\n            console.warn('No connection to OpenVidu Server. This may be a certificate error at ' + _this13.OPENVIDU_SERVER_URL);\n\n            if (window.confirm('No connection to OpenVidu Server. This may be a certificate error at \"' + _this13.OPENVIDU_SERVER_URL + '\"\\n\\nClick OK to navigate and accept it. ' + 'If no certificate warning is shown, then check that your OpenVidu Server is up and running at \"' + _this13.OPENVIDU_SERVER_URL + '\"')) {\n              window.location.assign(_this13.OPENVIDU_SERVER_URL + '/accept-certificate');\n            }\n          }\n        });\n      });\n    }\n  }, {\n    key: \"createToken\",\n    value: function createToken(sessionId) {\n      var _this14 = this;\n\n      return new Promise(function (resolve, reject) {\n        var data = JSON.stringify({});\n        axios.post(_this14.OPENVIDU_SERVER_URL + '/openvidu/api/sessions/' + sessionId + '/connection', data, {\n          headers: {\n            Authorization: 'Basic ' + btoa('OPENVIDUAPP:' + _this14.OPENVIDU_SERVER_SECRET),\n            'Content-Type': 'application/json'\n          }\n        }).then(function (response) {\n          console.log('TOKEN', response);\n          resolve(response.data.token);\n        }).catch(function (error) {\n          return reject(error);\n        });\n      });\n    }\n  }]);\n\n  return VideoRoomComponent;\n}(Component);\n\nexport { VideoRoomComponent as default };","map":{"version":3,"sources":["/home/dilip/Desktop/iuvdx-core-old/client/src/components/video-room/VideoRoomComponent.js"],"names":["React","Component","axios","OpenVidu","StreamComponent","DialogExtensionComponent","ChatComponent","OpenViduLayout","UserModel","ToolbarComponent","IpCameraComponent","IpcamServerComponent","IpCamModel","config","localUser","screen_share","require","VideoRoomComponent","props","OPENVIDU_SERVER_URL","OPENVIDU_SERVER_SECRET","hasBeenUpdated","layout","sessionName","match","params","value","replace","userName","user","Math","floor","random","state","mySessionId","myUserName","session","undefined","subscribers","ipCamSubscribers","chatDisplay","modalOpen","localUserOn","groupDisplay","joinSession","bind","leaveSession","onbeforeunload","updateLayout","camStatusChanged","micStatusChanged","nicknameChanged","toggleFullscreen","screenShare","stopScreenShare","closeDialogExtension","toggleChat","checkNotification","checkSize","showIPCameraDialog","showIPCameraServerDialog","setClose","getIPToken","removeCamera","groupStatusChanged","leaveSessionPage","openViduLayoutOptions","maxRatio","minRatio","fixedRatio","bigClass","bigPercentage","bigFixedRatio","bigMaxRatio","bigMinRatio","bigFirst","animate","initLayoutContainer","document","getElementById","window","addEventListener","removeEventListener","event","OV","setState","initSession","subscribeToStreamCreated","connectToSession","token","console","log","connect","getToken","then","catch","error","messgae","message","code","status","alert","clientData","connectWebCam","publisher","initPublisher","audioSource","videoSource","publishAudio","isAudioActive","publishVideo","isVideoActive","resolution","frameRate","insertMode","capabilities","publish","setNickname","setConnectionId","connection","connectionId","setScreenShareActive","setStreamManager","subscribeToUserChanged","subscribeToStreamDestroyed","sendSignalUserChanged","isScreenShareActive","getStreamManager","on","e","videos","video","parentElement","classList","remove","mySession","disconnect","serverModalOpen","setAudioActive","setVideoActive","setGroupActive","history","goBack","nickname","getNickname","stream","typeOfVideo","remoteCams","camStream","filter","index","indexOf","splice","remoteUsers","userStream","subscriber","subscribe","newCam","setType","data","push","checkSomeoneShareScreen","newUser","split","JSON","parse","deleteSubscriber","setTimeout","preventDefault","forEach","getConnectionId","from","signalOptions","stringify","type","signal","fs","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","msFullscreenElement","requestFullscreen","msRequestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","exitFullscreen","msExitFullscreen","mozCancelFullScreen","webkitExitFullscreen","navigator","userAgent","mirror","name","showExtensionDialog","once","unpublish","isGroupActive","isScreenShared","some","openviduLayoutOptions","setLayoutOptions","property","display","messageReceived","offsetWidth","setServerClose","map","sub","i","streamManager","streamId","cameras","sendData","headers","post","response","camName","camera","createSession","sessionId","createToken","Promise","resolve","reject","customSessionId","Authorization","btoa","id","Object","assign","warn","confirm","location"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,0BAAP;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,OAAOC,eAAP,MAA4B,2BAA5B;AACA,OAAOC,wBAAP,MAAqC,qCAArC;AACA,OAAOC,aAAP,MAA0B,uBAA1B;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,gBAAP,MAA6B,6BAA7B;AACA,OAAOC,iBAAP,MAA8B,gCAA9B;AACA,OAAOC,oBAAP,MAAiC,sCAAjC;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,SAASC,MAAT,QAAuB,cAAvB;AAEA,IAAIC,SAAS,GAAG,IAAIN,SAAJ,EAAhB;;AAEA,IAAMO,YAAY,GAAGC,OAAO,CAAC,gCAAD,CAA5B;;IAEqBC,kB;;;;;AACjB,8BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,8BAAMA,KAAN;AACA,UAAKC,mBAAL,GAA2BN,MAAM,CAACM,mBAAlC;AACA,UAAKC,sBAAL,GAA8BP,MAAM,CAACO,sBAArC;AACA,UAAKC,cAAL,GAAsB,KAAtB;AACA,UAAKC,MAAL,GAAc,IAAIf,cAAJ,EAAd;;AACA,QAAIgB,WAAW,GAAG,MAAKL,KAAL,CAAWM,KAAX,CAAiBC,MAAjB,CAAwBC,KAAxB,CAA8BC,OAA9B,CAAsC,IAAtC,EAA4C,EAA5C,CAAlB;;AACA,QAAIC,QAAQ,GAAG,MAAKV,KAAL,CAAWW,IAAX,GAAkB,MAAKX,KAAL,CAAWW,IAA7B,GAAoC,cAAcC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CAAjE;AACA,UAAKC,KAAL,GAAa;AACTC,MAAAA,WAAW,EAAEX,WADJ;AAETY,MAAAA,UAAU,EAAEP,QAFH;AAGTQ,MAAAA,OAAO,EAAEC,SAHA;AAITvB,MAAAA,SAAS,EAAEuB,SAJF;AAKTC,MAAAA,WAAW,EAAE,EALJ;AAMTC,MAAAA,gBAAgB,EAAE,EANT;AAOTC,MAAAA,WAAW,EAAE,MAPJ;AAQTC,MAAAA,SAAS,EAAC,KARD;AASTC,MAAAA,WAAW,EAAE,KATJ;AAUTC,MAAAA,YAAY,EAAE;AAVL,KAAb;AAaA,UAAKC,WAAL,GAAmB,MAAKA,WAAL,CAAiBC,IAAjB,+BAAnB;AACA,UAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBD,IAAlB,+BAApB;AACA,UAAKE,cAAL,GAAsB,MAAKA,cAAL,CAAoBF,IAApB,+BAAtB;AACA,UAAKG,YAAL,GAAoB,MAAKA,YAAL,CAAkBH,IAAlB,+BAApB;AACA,UAAKI,gBAAL,GAAwB,MAAKA,gBAAL,CAAsBJ,IAAtB,+BAAxB;AACA,UAAKK,gBAAL,GAAwB,MAAKA,gBAAL,CAAsBL,IAAtB,+BAAxB;AACA,UAAKM,eAAL,GAAuB,MAAKA,eAAL,CAAqBN,IAArB,+BAAvB;AACA,UAAKO,gBAAL,GAAwB,MAAKA,gBAAL,CAAsBP,IAAtB,+BAAxB;AACA,UAAKQ,WAAL,GAAmB,MAAKA,WAAL,CAAiBR,IAAjB,+BAAnB;AACA,UAAKS,eAAL,GAAuB,MAAKA,eAAL,CAAqBT,IAArB,+BAAvB;AACA,UAAKU,oBAAL,GAA4B,MAAKA,oBAAL,CAA0BV,IAA1B,+BAA5B;AACA,UAAKW,UAAL,GAAkB,MAAKA,UAAL,CAAgBX,IAAhB,+BAAlB;AACA,UAAKY,iBAAL,GAAyB,MAAKA,iBAAL,CAAuBZ,IAAvB,+BAAzB;AACA,UAAKa,SAAL,GAAiB,MAAKA,SAAL,CAAeb,IAAf,+BAAjB;AACA,UAAKc,kBAAL,GAA0B,MAAKA,kBAAL,CAAwBd,IAAxB,+BAA1B;AACA,UAAKe,wBAAL,GAAgC,MAAKA,wBAAL,CAA8Bf,IAA9B,+BAAhC;AACA,UAAKgB,QAAL,GAAgB,MAAKA,QAAL,CAAchB,IAAd,+BAAhB;AACA,UAAKiB,UAAL,GAAkB,MAAKA,UAAL,CAAgBjB,IAAhB,+BAAlB;AACA,UAAKkB,YAAL,GAAoB,MAAKA,YAAL,CAAkBlB,IAAlB,+BAApB;AACA,UAAKmB,kBAAL,GAA0B,MAAKA,kBAAL,CAAwBnB,IAAxB,+BAA1B;AACA,UAAKoB,gBAAL,GAAwB,MAAKA,gBAAL,CAAsBpB,IAAtB,+BAAxB;AAzCe;AA0ClB;;;;wCAEmB;AAChB,UAAMqB,qBAAqB,GAAG;AAC1BC,QAAAA,QAAQ,EAAE,IAAI,CADY;AACT;AACjBC,QAAAA,QAAQ,EAAE,IAAI,EAFY;AAER;AAClBC,QAAAA,UAAU,EAAE,KAHc;AAGP;AACnBC,QAAAA,QAAQ,EAAE,QAJgB;AAIN;AACpBC,QAAAA,aAAa,EAAE,GALW;AAKN;AACpBC,QAAAA,aAAa,EAAE,KANW;AAMJ;AACtBC,QAAAA,WAAW,EAAE,IAAI,CAPS;AAON;AACpBC,QAAAA,WAAW,EAAE,IAAI,EARS;AAQL;AACrBC,QAAAA,QAAQ,EAAE,IATgB;AASV;AAChBC,QAAAA,OAAO,EAAE,IAViB,CAUX;;AAVW,OAA9B;AAaA,WAAKtD,MAAL,CAAYuD,mBAAZ,CAAgCC,QAAQ,CAACC,cAAT,CAAwB,QAAxB,CAAhC,EAAmEb,qBAAnE;AACAc,MAAAA,MAAM,CAACC,gBAAP,CAAwB,cAAxB,EAAwC,KAAKlC,cAA7C;AACAiC,MAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkC,KAAKjC,YAAvC;AACAgC,MAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkC,KAAKvB,SAAvC;AACA,WAAKd,WAAL;AACH;;;2CAEsB;AACnBoC,MAAAA,MAAM,CAACE,mBAAP,CAA2B,cAA3B,EAA2C,KAAKnC,cAAhD;AACAiC,MAAAA,MAAM,CAACE,mBAAP,CAA2B,QAA3B,EAAqC,KAAKlC,YAA1C;AACAgC,MAAAA,MAAM,CAACE,mBAAP,CAA2B,QAA3B,EAAqC,KAAKxB,SAA1C;AACA,WAAKZ,YAAL;AACH;;;mCAEcqC,K,EAAO;AAClB,WAAKrC,YAAL;AACH;;;kCAEa;AAAA;;AACV,WAAKsC,EAAL,GAAU,IAAIjF,QAAJ,EAAV;AAEA,WAAKkF,QAAL,CACI;AACIjD,QAAAA,OAAO,EAAE,KAAKgD,EAAL,CAAQE,WAAR;AADb,OADJ,EAII,YAAM;AACF,QAAA,MAAI,CAACC,wBAAL;;AAEA,QAAA,MAAI,CAACC,gBAAL;AACH,OARL;AAUH;;;uCAEkB;AAAA;;AACf,UAAI,KAAKtE,KAAL,CAAWuE,KAAX,KAAqBpD,SAAzB,EAAoC;AAChCqD,QAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgC,KAAKzE,KAAL,CAAWuE,KAA3C;AACA,aAAKG,OAAL,CAAa,KAAK1E,KAAL,CAAWuE,KAAxB;AACH,OAHD,MAGO;AACH,aAAKI,QAAL,GAAgBC,IAAhB,CAAqB,UAACL,KAAD,EAAW;AAC5BC,UAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;;AACA,UAAA,MAAI,CAACG,OAAL,CAAaH,KAAb;AACH,SAHD,EAGGM,KAHH,CAGS,UAACC,KAAD,EAAW;AAChB,cAAG,MAAI,CAAC9E,KAAL,CAAW8E,KAAd,EAAoB;AAChB,YAAA,MAAI,CAAC9E,KAAL,CAAW8E,KAAX,CAAiB;AAAEA,cAAAA,KAAK,EAAEA,KAAK,CAACA,KAAf;AAAsBC,cAAAA,OAAO,EAAED,KAAK,CAACE,OAArC;AAA8CC,cAAAA,IAAI,EAAEH,KAAK,CAACG,IAA1D;AAAgEC,cAAAA,MAAM,EAAEJ,KAAK,CAACI;AAA9E,aAAjB;AACH;;AACDV,UAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ,EAAqDK,KAAK,CAACG,IAA3D,EAAiEH,KAAK,CAACE,OAAvE;AACAG,UAAAA,KAAK,CAAC,uCAAD,EAA0CL,KAAK,CAACE,OAAhD,CAAL;AACD,SATH;AAUH;AACJ;;;4BAEOT,K,EAAO;AAAA;;AACX,WAAKxD,KAAL,CAAWG,OAAX,CACKwD,OADL,CAEQH,KAFR,EAGQ;AAAEa,QAAAA,UAAU,EAAE,KAAKrE,KAAL,CAAWE;AAAzB,OAHR,EAKK2D,IALL,CAKU,YAAM;AACR,QAAA,MAAI,CAACS,aAAL;AACH,OAPL,EAQKR,KARL,CAQW,UAACC,KAAD,EAAW;AACd,YAAG,MAAI,CAAC9E,KAAL,CAAW8E,KAAd,EAAoB;AAChB,UAAA,MAAI,CAAC9E,KAAL,CAAW8E,KAAX,CAAiB;AAAEA,YAAAA,KAAK,EAAEA,KAAK,CAACA,KAAf;AAAsBC,YAAAA,OAAO,EAAED,KAAK,CAACE,OAArC;AAA8CC,YAAAA,IAAI,EAAEH,KAAK,CAACG,IAA1D;AAAgEC,YAAAA,MAAM,EAAEJ,KAAK,CAACI;AAA9E,WAAjB;AACH;;AACDC,QAAAA,KAAK,CAAC,+CAAD,EAAkDL,KAAK,CAACE,OAAxD,CAAL;AACAR,QAAAA,OAAO,CAACC,GAAR,CAAY,+CAAZ,EAA6DK,KAAK,CAACG,IAAnE,EAAyEH,KAAK,CAACE,OAA/E;AACH,OAdL;AAeH;;;oCAEe;AAAA;;AACZ,UAAIM,SAAS,GAAG,KAAKpB,EAAL,CAAQqB,aAAR,CAAsBpE,SAAtB,EAAiC;AAC7CqE,QAAAA,WAAW,EAAErE,SADgC;AAE7CsE,QAAAA,WAAW,EAAEtE,SAFgC;AAG7CuE,QAAAA,YAAY,EAAE9F,SAAS,CAAC+F,aAAV,EAH+B;AAI7CC,QAAAA,YAAY,EAAEhG,SAAS,CAACiG,aAAV,EAJ+B;AAK7CC,QAAAA,UAAU,EAAE,SALiC;AAM7CC,QAAAA,SAAS,EAAE,EANkC;AAO7CC,QAAAA,UAAU,EAAE;AAPiC,OAAjC,CAAhB;;AAUA,UAAI,KAAKjF,KAAL,CAAWG,OAAX,CAAmB+E,YAAnB,CAAgCC,OAApC,EAA6C;AACzC,aAAKnF,KAAL,CAAWG,OAAX,CAAmBgF,OAAnB,CAA2BZ,SAA3B,EAAsCV,IAAtC,CAA2C,YAAM;AAC7C,cAAI,MAAI,CAAC5E,KAAL,CAAW0B,WAAf,EAA4B;AACxB,YAAA,MAAI,CAAC1B,KAAL,CAAW0B,WAAX;AACH;AACJ,SAJD;AAKH;;AACD9B,MAAAA,SAAS,CAACuG,WAAV,CAAsB,KAAKpF,KAAL,CAAWE,UAAjC;AACArB,MAAAA,SAAS,CAACwG,eAAV,CAA0B,KAAKrF,KAAL,CAAWG,OAAX,CAAmBmF,UAAnB,CAA8BC,YAAxD;AACA1G,MAAAA,SAAS,CAAC2G,oBAAV,CAA+B,KAA/B;AACA3G,MAAAA,SAAS,CAAC4G,gBAAV,CAA2BlB,SAA3B;AACA,WAAKmB,sBAAL;AACA,WAAKC,0BAAL;AACA,WAAKC,qBAAL,CAA2B;AAAEC,QAAAA,mBAAmB,EAAEhH,SAAS,CAACgH,mBAAV;AAAvB,OAA3B;AAEA,WAAKzC,QAAL,CAAc;AAAEvE,QAAAA,SAAS,EAAEA;AAAb,OAAd,EAAwC,YAAM;AAC1C,QAAA,MAAI,CAACmB,KAAL,CAAWnB,SAAX,CAAqBiH,gBAArB,GAAwCC,EAAxC,CAA2C,eAA3C,EAA4D,UAACC,CAAD,EAAO;AAC/D,UAAA,MAAI,CAACjF,YAAL;;AACAwD,UAAAA,SAAS,CAAC0B,MAAV,CAAiB,CAAjB,EAAoBC,KAApB,CAA0BC,aAA1B,CAAwCC,SAAxC,CAAkDC,MAAlD,CAAyD,cAAzD;AACH,SAHD;AAIH,OALD;AAMH;;;iCAEYL,C,EAAG;AACZ,UAAMM,SAAS,GAAG,KAAKtG,KAAL,CAAWG,OAA7B;;AAEA,UAAImG,SAAJ,EAAe;AACXA,QAAAA,SAAS,CAACC,UAAV;AACH,OALW,CAOZ;;;AACA,WAAKpD,EAAL,GAAU,IAAV;AACA,WAAKC,QAAL,CAAc;AACVjD,QAAAA,OAAO,EAAEC,SADC;AAEVC,QAAAA,WAAW,EAAE,EAFH;AAGVC,QAAAA,gBAAgB,EAAE,EAHR;AAIVL,QAAAA,WAAW,EAAE,UAJH;AAKVC,QAAAA,UAAU,EAAE,cAAcL,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CALhB;AAMVlB,QAAAA,SAAS,EAAEuB,SAND;AAOVG,QAAAA,WAAW,EAAE,MAPH;AAQVC,QAAAA,SAAS,EAAE,KARD;AASVgG,QAAAA,eAAe,EAAE,KATP;AAUV/F,QAAAA,WAAW,EAAE,KAVH;AAWVC,QAAAA,YAAY,EAAE;AAXJ,OAAd;AAaA7B,MAAAA,SAAS,CAAC4H,cAAV,CAAyB,IAAzB;AACA5H,MAAAA,SAAS,CAAC6H,cAAV,CAAyB,KAAzB;AACA7H,MAAAA,SAAS,CAAC8H,cAAV,CAAyB,IAAzB;;AACA,UAAI,KAAK1H,KAAL,CAAW4B,YAAf,EAA6B;AACzB,aAAK5B,KAAL,CAAW4B,YAAX;AACH;AACJ;;;uCAEkB;AACf,WAAK5B,KAAL,CAAW2H,OAAX,CAAmBC,MAAnB;AACH;;;uCAEkB;AACfhI,MAAAA,SAAS,CAAC6H,cAAV,CAAyB,CAAC7H,SAAS,CAACiG,aAAV,EAA1B;AACAjG,MAAAA,SAAS,CAACiH,gBAAV,GAA6BjB,YAA7B,CAA0ChG,SAAS,CAACiG,aAAV,EAA1C;AACA,WAAKc,qBAAL,CAA2B;AAAEd,QAAAA,aAAa,EAAEjG,SAAS,CAACiG,aAAV;AAAjB,OAA3B;AACA,WAAK1B,QAAL,CAAc;AAAEvE,QAAAA,SAAS,EAAEA;AAAb,OAAd;AACA,WAAKuE,QAAL,CAAc;AAAE3C,QAAAA,WAAW,EAAE,CAAC,KAAKT,KAAL,CAAWS;AAA3B,OAAd;AACH;;;uCAEkB;AACf5B,MAAAA,SAAS,CAAC4H,cAAV,CAAyB,CAAC5H,SAAS,CAAC+F,aAAV,EAA1B;AACA/F,MAAAA,SAAS,CAACiH,gBAAV,GAA6BnB,YAA7B,CAA0C9F,SAAS,CAAC+F,aAAV,EAA1C;AACA,WAAKgB,qBAAL,CAA2B;AAAEhB,QAAAA,aAAa,EAAE/F,SAAS,CAAC+F,aAAV;AAAjB,OAA3B;AACA,WAAKxB,QAAL,CAAc;AAAEvE,QAAAA,SAAS,EAAEA;AAAb,OAAd;AACH;;;oCAEeiI,Q,EAAU;AACtB,UAAIjI,SAAS,GAAG,KAAKmB,KAAL,CAAWnB,SAA3B;AACAA,MAAAA,SAAS,CAACuG,WAAV,CAAsB0B,QAAtB;AACA,WAAK1D,QAAL,CAAc;AAAEvE,QAAAA,SAAS,EAAEA;AAAb,OAAd;AACA,WAAK+G,qBAAL,CAA2B;AAAEkB,QAAAA,QAAQ,EAAE,KAAK9G,KAAL,CAAWnB,SAAX,CAAqBkI,WAArB;AAAZ,OAA3B;AACH;;;qCAEgBC,M,EAAQ;AACrB,UAAGA,MAAM,CAACC,WAAP,KAAuB,OAA1B,EAAmC;AAC/B,YAAMC,UAAU,GAAG,KAAKlH,KAAL,CAAWM,gBAA9B;AACA,YAAM6G,SAAS,GAAGD,UAAU,CAACE,MAAX,CAAkB,UAACxH,IAAD;AAAA,iBAAUA,IAAI,CAACkG,gBAAL,GAAwBkB,MAAxB,KAAmCA,MAA7C;AAAA,SAAlB,EAAuE,CAAvE,CAAlB;AACA,YAAIK,KAAK,GAAGH,UAAU,CAACI,OAAX,CAAmBH,SAAnB,EAA8B,CAA9B,CAAZ;;AACA,YAAIE,KAAK,GAAG,CAAC,CAAb,EAAgB;AACZH,UAAAA,UAAU,CAACK,MAAX,CAAkBF,KAAlB,EAAyB,CAAzB;AACA,eAAKjE,QAAL,CAAc;AACV9C,YAAAA,gBAAgB,EAAE4G;AADR,WAAd;AAGH;AACJ,OAVD,MAWK;AACD,YAAMM,WAAW,GAAG,KAAKxH,KAAL,CAAWK,WAA/B;AACA,YAAMoH,UAAU,GAAGD,WAAW,CAACJ,MAAZ,CAAmB,UAACxH,IAAD;AAAA,iBAAUA,IAAI,CAACkG,gBAAL,GAAwBkB,MAAxB,KAAmCA,MAA7C;AAAA,SAAnB,EAAwE,CAAxE,CAAnB;;AACA,YAAIK,MAAK,GAAGG,WAAW,CAACF,OAAZ,CAAoBG,UAApB,EAAgC,CAAhC,CAAZ;;AACA,YAAIJ,MAAK,GAAG,CAAC,CAAb,EAAgB;AACZG,UAAAA,WAAW,CAACD,MAAZ,CAAmBF,MAAnB,EAA0B,CAA1B;AACA,eAAKjE,QAAL,CAAc;AACV/C,YAAAA,WAAW,EAAEmH;AADH,WAAd;AAGH;AACJ;AACJ;;;+CAE0B;AAAA;;AACvB,WAAKxH,KAAL,CAAWG,OAAX,CAAmB4F,EAAnB,CAAsB,eAAtB,EAAuC,UAAC7C,KAAD,EAAW;AAC9C,YAAMwE,UAAU,GAAG,MAAI,CAAC1H,KAAL,CAAWG,OAAX,CAAmBwH,SAAnB,CAA6BzE,KAAK,CAAC8D,MAAnC,EAA2C5G,SAA3C,CAAnB;;AAEA,YAAG8C,KAAK,CAAC8D,MAAN,CAAaC,WAAb,KAA6B,OAAhC,EAAyC;AACrC,cAAI3G,gBAAgB,GAAG,MAAI,CAACN,KAAL,CAAWM,gBAAlC;AACAoH,UAAAA,UAAU,CAAC3B,EAAX,CAAc,eAAd,EAA+B,UAACC,CAAD,EAAO;AAClC0B,YAAAA,UAAU,CAACzB,MAAX,CAAkB,CAAlB,EAAqBC,KAArB,CAA2BC,aAA3B,CAAyCC,SAAzC,CAAmDC,MAAnD,CAA0D,cAA1D;AACH,WAFD;AAGA,cAAMuB,MAAM,GAAG,IAAIjJ,UAAJ,EAAf;AACAiJ,UAAAA,MAAM,CAACnC,gBAAP,CAAwBiC,UAAxB;AACAE,UAAAA,MAAM,CAACvC,eAAP,CAAuBnC,KAAK,CAAC8D,MAAN,CAAa1B,UAAb,CAAwBC,YAA/C;AACAqC,UAAAA,MAAM,CAACC,OAAP,CAAe,OAAf;AACAD,UAAAA,MAAM,CAACxC,WAAP,CAAmBlC,KAAK,CAAC8D,MAAN,CAAa1B,UAAb,CAAwBwC,IAA3C;AACAxH,UAAAA,gBAAgB,CAACyH,IAAjB,CAAsBH,MAAtB;;AACA,UAAA,MAAI,CAACxE,QAAL,CACI;AACI9C,YAAAA,gBAAgB,EAAEA;AADtB,WADJ,EAII,YAAM;AACF,gBAAI,MAAI,CAACN,KAAL,CAAWnB,SAAf,EAA0B;AACtB,cAAA,MAAI,CAAC+G,qBAAL,CAA2B;AACvBhB,gBAAAA,aAAa,EAAE,MAAI,CAAC5E,KAAL,CAAWnB,SAAX,CAAqB+F,aAArB,EADQ;AAEvBE,gBAAAA,aAAa,EAAE,MAAI,CAAC9E,KAAL,CAAWnB,SAAX,CAAqBiG,aAArB,EAFQ;AAGvBgC,gBAAAA,QAAQ,EAAE,MAAI,CAAC9G,KAAL,CAAWnB,SAAX,CAAqBkI,WAArB,EAHa;AAIvBlB,gBAAAA,mBAAmB,EAAE,MAAI,CAAC7F,KAAL,CAAWnB,SAAX,CAAqBgH,mBAArB;AAJE,eAA3B;AAMH;;AACD,YAAA,MAAI,CAAC9E,YAAL;AACH,WAdL;AAgBH,SA3BD,MA4BK;AACD,cAAIV,WAAW,GAAG,MAAI,CAACL,KAAL,CAAWK,WAA7B;AACAqH,UAAAA,UAAU,CAAC3B,EAAX,CAAc,eAAd,EAA+B,UAACC,CAAD,EAAO;AAClC,YAAA,MAAI,CAACgC,uBAAL;;AACAN,YAAAA,UAAU,CAACzB,MAAX,CAAkB,CAAlB,EAAqBC,KAArB,CAA2BC,aAA3B,CAAyCC,SAAzC,CAAmDC,MAAnD,CAA0D,cAA1D;AACH,WAHD;AAIA,cAAM4B,OAAO,GAAG,IAAI1J,SAAJ,EAAhB;AACA0J,UAAAA,OAAO,CAACxC,gBAAR,CAAyBiC,UAAzB;AACAO,UAAAA,OAAO,CAAC5C,eAAR,CAAwBnC,KAAK,CAAC8D,MAAN,CAAa1B,UAAb,CAAwBC,YAAhD;AACA0C,UAAAA,OAAO,CAACJ,OAAR,CAAgB,QAAhB;AACA,cAAIf,QAAQ,GAAG5D,KAAK,CAAC8D,MAAN,CAAa1B,UAAb,CAAwBwC,IAAxB,CAA6BI,KAA7B,CAAmC,GAAnC,EAAwC,CAAxC,CAAf;AACAD,UAAAA,OAAO,CAAC7C,WAAR,CAAoB+C,IAAI,CAACC,KAAL,CAAWtB,QAAX,EAAqBzC,UAAzC;AACAhE,UAAAA,WAAW,CAAC0H,IAAZ,CAAiBE,OAAjB;;AACA,UAAA,MAAI,CAAC7E,QAAL,CACI;AACI/C,YAAAA,WAAW,EAAEA;AADjB,WADJ,EAII,YAAM;AACF,gBAAI,MAAI,CAACL,KAAL,CAAWnB,SAAf,EAA0B;AACtB,cAAA,MAAI,CAAC+G,qBAAL,CAA2B;AACvBhB,gBAAAA,aAAa,EAAE,MAAI,CAAC5E,KAAL,CAAWnB,SAAX,CAAqB+F,aAArB,EADQ;AAEvBE,gBAAAA,aAAa,EAAE,MAAI,CAAC9E,KAAL,CAAWnB,SAAX,CAAqBiG,aAArB,EAFQ;AAGvBgC,gBAAAA,QAAQ,EAAE,MAAI,CAAC9G,KAAL,CAAWnB,SAAX,CAAqBkI,WAArB,EAHa;AAIvBlB,gBAAAA,mBAAmB,EAAE,MAAI,CAAC7F,KAAL,CAAWnB,SAAX,CAAqBgH,mBAArB;AAJE,eAA3B;AAMH;;AACD,YAAA,MAAI,CAAC9E,YAAL;AACH,WAdL;AAgBH;AACJ,OA7DD;AA8DH;;;iDAE4B;AAAA;;AACzB;AACA,WAAKf,KAAL,CAAWG,OAAX,CAAmB4F,EAAnB,CAAsB,iBAAtB,EAAyC,UAAC7C,KAAD,EAAW;AAChD;AACA,QAAA,MAAI,CAACmF,gBAAL,CAAsBnF,KAAK,CAAC8D,MAA5B;;AACAsB,QAAAA,UAAU,CAAC,YAAM;AACb,UAAA,MAAI,CAACN,uBAAL;AACH,SAFS,EAEP,EAFO,CAAV;AAGA9E,QAAAA,KAAK,CAACqF,cAAN;;AACA,QAAA,MAAI,CAACxH,YAAL;AACH,OARD;AASH;;;6CAEwB;AAAA;;AACrB,WAAKf,KAAL,CAAWG,OAAX,CAAmB4F,EAAnB,CAAsB,oBAAtB,EAA4C,UAAC7C,KAAD,EAAW;AACnD,YAAIsE,WAAW,GAAG,MAAI,CAACxH,KAAL,CAAWK,WAA7B;AACAmH,QAAAA,WAAW,CAACgB,OAAZ,CAAoB,UAAC5I,IAAD,EAAU;AAC1B,cAAIA,IAAI,CAAC6I,eAAL,OAA2BvF,KAAK,CAACwF,IAAN,CAAWnD,YAA1C,EAAwD;AACpD,gBAAMuC,IAAI,GAAGK,IAAI,CAACC,KAAL,CAAWlF,KAAK,CAAC4E,IAAjB,CAAb;AACArE,YAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BR,KAAK,CAAC4E,IAArC;;AACA,gBAAIA,IAAI,CAAClD,aAAL,KAAuBxE,SAA3B,EAAsC;AAClCR,cAAAA,IAAI,CAAC6G,cAAL,CAAoBqB,IAAI,CAAClD,aAAzB;AACH;;AACD,gBAAIkD,IAAI,CAAChD,aAAL,KAAuB1E,SAA3B,EAAsC;AAClCR,cAAAA,IAAI,CAAC8G,cAAL,CAAoBoB,IAAI,CAAChD,aAAzB;AACH;;AACD,gBAAIgD,IAAI,CAAChB,QAAL,KAAkB1G,SAAtB,EAAiC;AAC7BR,cAAAA,IAAI,CAACwF,WAAL,CAAiB0C,IAAI,CAAChB,QAAtB;AACH;;AACD,gBAAIgB,IAAI,CAACjC,mBAAL,KAA6BzF,SAAjC,EAA4C;AACxCR,cAAAA,IAAI,CAAC4F,oBAAL,CAA0BsC,IAAI,CAACjC,mBAA/B;AACH;AACJ;AACJ,SAjBD;;AAkBA,QAAA,MAAI,CAACzC,QAAL,CACI;AACI/C,UAAAA,WAAW,EAAEmH;AADjB,SADJ,EAII;AAAA,iBAAM,MAAI,CAACQ,uBAAL,EAAN;AAAA,SAJJ;AAMH,OA1BD;AA2BH;;;mCAEc;AAAA;;AACXM,MAAAA,UAAU,CAAC,YAAM;AACb,QAAA,MAAI,CAACjJ,MAAL,CAAY0B,YAAZ;AACH,OAFS,EAEP,EAFO,CAAV;AAGH;;;0CAEqB+G,I,EAAM;AACxB,UAAMa,aAAa,GAAG;AAClBb,QAAAA,IAAI,EAAEK,IAAI,CAACS,SAAL,CAAed,IAAf,CADY;AAElBe,QAAAA,IAAI,EAAE;AAFY,OAAtB;AAIA,WAAK7I,KAAL,CAAWG,OAAX,CAAmB2I,MAAnB,CAA0BH,aAA1B;AACH;;;uCAEkB;AACf,UAAM9F,QAAQ,GAAGE,MAAM,CAACF,QAAxB;AACA,UAAMkG,EAAE,GAAGlG,QAAQ,CAACC,cAAT,CAAwB,WAAxB,CAAX;;AACA,UACI,CAACD,QAAQ,CAACmG,iBAAV,IACA,CAACnG,QAAQ,CAACoG,oBADV,IAEA,CAACpG,QAAQ,CAACqG,uBAFV,IAGA,CAACrG,QAAQ,CAACsG,mBAJd,EAKE;AACE,YAAIJ,EAAE,CAACK,iBAAP,EAA0B;AACtBL,UAAAA,EAAE,CAACK,iBAAH;AACH,SAFD,MAEO,IAAIL,EAAE,CAACM,mBAAP,EAA4B;AAC/BN,UAAAA,EAAE,CAACM,mBAAH;AACH,SAFM,MAEA,IAAIN,EAAE,CAACO,oBAAP,EAA6B;AAChCP,UAAAA,EAAE,CAACO,oBAAH;AACH,SAFM,MAEA,IAAIP,EAAE,CAACQ,uBAAP,EAAgC;AACnCR,UAAAA,EAAE,CAACQ,uBAAH;AACH;AACJ,OAfD,MAeO;AACH,YAAI1G,QAAQ,CAAC2G,cAAb,EAA6B;AACzB3G,UAAAA,QAAQ,CAAC2G,cAAT;AACH,SAFD,MAEO,IAAI3G,QAAQ,CAAC4G,gBAAb,EAA+B;AAClC5G,UAAAA,QAAQ,CAAC4G,gBAAT;AACH,SAFM,MAEA,IAAI5G,QAAQ,CAAC6G,mBAAb,EAAkC;AACrC7G,UAAAA,QAAQ,CAAC6G,mBAAT;AACH,SAFM,MAEA,IAAI7G,QAAQ,CAAC8G,oBAAb,EAAmC;AACtC9G,UAAAA,QAAQ,CAAC8G,oBAAT;AACH;AACJ;AACJ;;;kCAEa;AAAA;;AACV,UAAMjF,WAAW,GAAGkF,SAAS,CAACC,SAAV,CAAoBvC,OAApB,CAA4B,SAA5B,MAA2C,CAAC,CAA5C,GAAgD,QAAhD,GAA2D,QAA/E;AACA,UAAM/C,SAAS,GAAG,KAAKpB,EAAL,CAAQqB,aAAR,CACdpE,SADc,EAEd;AACIsE,QAAAA,WAAW,EAAEA,WADjB;AAEIC,QAAAA,YAAY,EAAE9F,SAAS,CAAC+F,aAAV,EAFlB;AAGIC,QAAAA,YAAY,EAAEhG,SAAS,CAACiG,aAAV,EAHlB;AAIIgF,QAAAA,MAAM,EAAE;AAJZ,OAFc,EAQd,UAAC/F,KAAD,EAAW;AACP,YAAIA,KAAK,IAAIA,KAAK,CAACgG,IAAN,KAAe,gCAA5B,EAA8D;AAC1D,UAAA,OAAI,CAAC3G,QAAL,CAAc;AAAE4G,YAAAA,mBAAmB,EAAE;AAAvB,WAAd;AACH,SAFD,MAEO,IAAIjG,KAAK,IAAIA,KAAK,CAACgG,IAAN,KAAe,8BAA5B,EAA4D;AAC/D3F,UAAAA,KAAK,CAAC,8CAAD,CAAL;AACH,SAFM,MAEA,IAAIL,KAAK,IAAIA,KAAK,CAACgG,IAAN,KAAe,2BAA5B,EAAyD;AAC5D3F,UAAAA,KAAK,CAAC,6CAAD,CAAL;AACH,SAFM,MAEA,IAAIL,KAAK,IAAIA,KAAK,CAACgG,IAAN,KAAe,uBAA5B,EAAqD;AACxD3F,UAAAA,KAAK,CAAC,qDAAD,CAAL;AACH;AACJ,OAlBa,CAAlB;AAqBAG,MAAAA,SAAS,CAAC0F,IAAV,CAAe,eAAf,EAAgC,YAAM;AAClC,QAAA,OAAI,CAACjK,KAAL,CAAWG,OAAX,CAAmB+J,SAAnB,CAA6BrL,SAAS,CAACiH,gBAAV,EAA7B;;AACAjH,QAAAA,SAAS,CAAC4G,gBAAV,CAA2BlB,SAA3B;;AACA,QAAA,OAAI,CAACvE,KAAL,CAAWG,OAAX,CAAmBgF,OAAnB,CAA2BtG,SAAS,CAACiH,gBAAV,EAA3B,EAAyDjC,IAAzD,CAA8D,YAAM;AAChEhF,UAAAA,SAAS,CAAC2G,oBAAV,CAA+B,IAA/B;;AACA,UAAA,OAAI,CAACpC,QAAL,CAAc;AAAEvE,YAAAA,SAAS,EAAEA;AAAb,WAAd,EAAwC,YAAM;AAC1C,YAAA,OAAI,CAAC+G,qBAAL,CAA2B;AAAEC,cAAAA,mBAAmB,EAAEhH,SAAS,CAACgH,mBAAV;AAAvB,aAA3B;AACH,WAFD;AAGH,SALD;AAMH,OATD;AAUAtB,MAAAA,SAAS,CAACwB,EAAV,CAAa,eAAb,EAA8B,YAAM;AAChC,QAAA,OAAI,CAAChF,YAAL;;AACAwD,QAAAA,SAAS,CAAC0B,MAAV,CAAiB,CAAjB,EAAoBC,KAApB,CAA0BC,aAA1B,CAAwCC,SAAxC,CAAkDC,MAAlD,CAAyD,cAAzD;AACH,OAHD;AAIH;;;2CAEsB;AACnB,WAAKjD,QAAL,CAAc;AAAE4G,QAAAA,mBAAmB,EAAE;AAAvB,OAAd;AACH;;;sCAEiB;AACd,WAAKhK,KAAL,CAAWG,OAAX,CAAmB+J,SAAnB,CAA6BrL,SAAS,CAACiH,gBAAV,EAA7B;AACA,WAAKxB,aAAL;AACH;;;yCAEoB;AACjBzF,MAAAA,SAAS,CAAC8H,cAAV,CAAyB,CAAC,KAAK3G,KAAL,CAAWU,YAArC;AACA,WAAKkF,qBAAL,CAA2B;AAAEuE,QAAAA,aAAa,EAAEtL,SAAS,CAACsL,aAAV;AAAjB,OAA3B;AACA,WAAK/G,QAAL,CAAc;AAAE1C,QAAAA,YAAY,EAAE,CAAC,KAAKV,KAAL,CAAWU;AAA5B,OAAd;AACH;;;8CAEyB;AACtB,UAAI0J,cAAJ,CADsB,CAEtB;;AACAA,MAAAA,cAAc,GAAG,KAAKpK,KAAL,CAAWK,WAAX,CAAuBgK,IAAvB,CAA4B,UAACzK,IAAD;AAAA,eAAUA,IAAI,CAACiG,mBAAL,EAAV;AAAA,OAA5B,KAAqEhH,SAAS,CAACgH,mBAAV,EAAtF;AACA,UAAMyE,qBAAqB,GAAG;AAC1BpI,QAAAA,QAAQ,EAAE,IAAI,CADY;AAE1BC,QAAAA,QAAQ,EAAE,IAAI,EAFY;AAG1BC,QAAAA,UAAU,EAAEgI,cAHc;AAI1B/H,QAAAA,QAAQ,EAAE,QAJgB;AAK1BC,QAAAA,aAAa,EAAE,GALW;AAM1BC,QAAAA,aAAa,EAAE,KANW;AAO1BC,QAAAA,WAAW,EAAE,IAAI,CAPS;AAQ1BC,QAAAA,WAAW,EAAE,IAAI,EARS;AAS1BC,QAAAA,QAAQ,EAAE,IATgB;AAU1BC,QAAAA,OAAO,EAAE;AAViB,OAA9B;AAYA,WAAKtD,MAAL,CAAYkL,gBAAZ,CAA6BD,qBAA7B;AACA,WAAKvJ,YAAL;AACH;;;+BAEUyJ,Q,EAAU;AACjB,UAAIC,OAAO,GAAGD,QAAd;;AAEA,UAAIC,OAAO,KAAKrK,SAAhB,EAA2B;AACvBqK,QAAAA,OAAO,GAAG,KAAKzK,KAAL,CAAWO,WAAX,KAA2B,MAA3B,GAAoC,OAApC,GAA8C,MAAxD;AACH;;AACD,UAAIkK,OAAO,KAAK,OAAhB,EAAyB;AACrB,aAAKrH,QAAL,CAAc;AAAE7C,UAAAA,WAAW,EAAEkK,OAAf;AAAwBC,UAAAA,eAAe,EAAE;AAAzC,SAAd;AACH,OAFD,MAEO;AACHjH,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoB+G,OAApB;AACA,aAAKrH,QAAL,CAAc;AAAE7C,UAAAA,WAAW,EAAEkK;AAAf,SAAd;AACH;;AACD,WAAK1J,YAAL;AACH;;;sCAEiBmC,K,EAAO;AACrB,WAAKE,QAAL,CAAc;AACVsH,QAAAA,eAAe,EAAE,KAAK1K,KAAL,CAAWO,WAAX,KAA2B;AADlC,OAAd;AAGH;;;gCAEW;AACR,UAAIsC,QAAQ,CAACC,cAAT,CAAwB,QAAxB,EAAkC6H,WAAlC,IAAiD,GAAjD,IAAwD,CAAC,KAAKvL,cAAlE,EAAkF;AAC9E,aAAKmC,UAAL,CAAgB,MAAhB;AACA,aAAKnC,cAAL,GAAsB,IAAtB;AACH;;AACD,UAAIyD,QAAQ,CAACC,cAAT,CAAwB,QAAxB,EAAkC6H,WAAlC,GAAgD,GAAhD,IAAuD,KAAKvL,cAAhE,EAAgF;AAC5E,aAAKA,cAAL,GAAsB,KAAtB;AACH;AACJ;;;yCAEmB;AAChB,WAAKgE,QAAL,CAAc;AAAC5C,QAAAA,SAAS,EAAC,CAAC,KAAKR,KAAL,CAAWQ;AAAvB,OAAd;AACH;;;+CAEyB;AACtB,WAAK4C,QAAL,CAAc;AAACoD,QAAAA,eAAe,EAAC,CAAC,KAAKxG,KAAL,CAAWwG;AAA7B,OAAd;AACH;;;+BAES;AACN,WAAKpD,QAAL,CAAc;AAAC5C,QAAAA,SAAS,EAAC,CAAC,KAAKR,KAAL,CAAWQ;AAAvB,OAAd;AACH;;;qCAEe;AACZ,WAAK4C,QAAL,CAAc;AAACoD,QAAAA,eAAe,EAAC,CAAC,KAAKxG,KAAL,CAAWwG;AAA7B,OAAd;AACH;;;6BAEQ;AAAA;;AACL,UAAMvG,WAAW,GAAG,KAAKD,KAAL,CAAWC,WAA/B;AACA,UAAMpB,SAAS,GAAG,KAAKmB,KAAL,CAAWnB,SAA7B;AACA,UAAI0B,WAAW,GAAG;AAAEkK,QAAAA,OAAO,EAAE,KAAKzK,KAAL,CAAWO;AAAtB,OAAlB;AAEA,0BACI;AAAK,QAAA,SAAS,EAAC,WAAf;AAA2B,QAAA,EAAE,EAAC,WAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,gBAAD;AACI,QAAA,SAAS,EAAEN,WADf;AAEI,QAAA,IAAI,EAAEpB,SAFV;AAGI,QAAA,gBAAgB,EAAE,KAAKmB,KAAL,CAAW0K,eAHjC;AAII,QAAA,gBAAgB,EAAE,KAAK1J,gBAJ3B;AAKI,QAAA,gBAAgB,EAAE,KAAKC,gBAL3B;AAMI,QAAA,kBAAkB,EAAE,KAAKc,kBAN7B;AAOI,QAAA,WAAW,EAAE,KAAKX,WAPtB;AAQI,QAAA,eAAe,EAAE,KAAKC,eAR1B;AASI,QAAA,gBAAgB,EAAE,KAAKF,gBAT3B;AAUI,QAAA,gBAAgB,EAAE,KAAKa,gBAV3B;AAWI,QAAA,UAAU,EAAE,KAAKT,UAXrB;AAYI,QAAA,kBAAkB,EAAG,KAAKG,kBAZ9B;AAaI,QAAA,wBAAwB,EAAE,KAAKC,wBAbnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,eAiBI,oBAAC,wBAAD;AAA0B,QAAA,UAAU,EAAE,KAAK3B,KAAL,CAAWgK,mBAAjD;AAAsE,QAAA,aAAa,EAAE,KAAK1I,oBAA1F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAjBJ,eAkBI,oBAAC,iBAAD;AAAmB,QAAA,IAAI,EAAE,KAAKtB,KAAL,CAAWQ,SAApC;AAA+C,QAAA,QAAQ,EAAE,KAAKoB,QAA9D;AAAwE,QAAA,QAAQ,EAAE,KAAKC,UAAvF;AAAmG,QAAA,SAAS,EAAE,KAAKC,YAAnH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAlBJ,eAmBI,oBAAC,oBAAD;AAAsB,QAAA,IAAI,EAAE,KAAK9B,KAAL,CAAWwG,eAAvC;AAAwD,QAAA,QAAQ,EAAE,KAAKoE,cAAvE;AAAuF,QAAA,QAAQ,EAAE,KAAK/I,UAAtG;AAAkH,QAAA,SAAS,EAAE,KAAKC,YAAlI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAnBJ,eAsBI;AAAK,QAAA,EAAE,EAAC,QAAR;AAAiB,QAAA,SAAS,EAAC,QAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAK9B,KAAL,CAAWS,WAAX,IAA0B5B,SAAS,KAAKuB,SAAxC,IAAqDvB,SAAS,CAACiH,gBAAV,OAAiC1F,SAAtF,KACGvB,SAAS,CAACgH,mBAAV,kBACI;AAAK,QAAA,EAAE,EAAC,aAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAI;AAAK,QAAA,GAAG,EAAC,gBAAT;AAA0B,QAAA,GAAG,EAAE/G,YAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAJ,CADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAAJ,CAFJ,CADJ,CADJ,gBAQI;AAAK,QAAA,SAAS,EAAC,mCAAf;AAAmD,QAAA,EAAE,EAAC,WAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,eAAD;AAAiB,QAAA,IAAI,EAAED,SAAvB;AAAkC,QAAA,cAAc,EAAE,KAAKqC,eAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CATP,CADL,EAeK,KAAKlB,KAAL,CAAWU,YAAX,IAA2B,KAAKV,KAAL,CAAWK,WAAX,CAAuBwK,GAAvB,CAA2B,UAACC,GAAD,EAAMC,CAAN;AAAA,4BACnD;AAAK,UAAA,GAAG,EAAEA,CAAV;AAAa,UAAA,SAAS,EAAC,mCAAvB;AAA2D,UAAA,EAAE,EAAC,aAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACI,oBAAC,eAAD;AAAiB,UAAA,IAAI,EAAED,GAAvB;AAA4B,UAAA,QAAQ,EAAEA,GAAG,CAACE,aAAJ,CAAkBhE,MAAlB,CAAyBiE,QAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,CADmD;AAAA,OAA3B,CAfhC,EAoBK,KAAKjL,KAAL,CAAWM,gBAAX,CAA4BuK,GAA5B,CAAgC,UAACC,GAAD,EAAMC,CAAN;AAAA,4BAC7B;AAAK,UAAA,GAAG,EAAEA,CAAV;AAAa,UAAA,SAAS,EAAC,mCAAvB;AAA2D,UAAA,EAAE,EAAC,WAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACI,oBAAC,eAAD;AAAiB,UAAA,IAAI,EAAED,GAAvB;AAA4B,UAAA,QAAQ,EAAEA,GAAG,CAACE,aAAJ,CAAkBhE,MAAlB,CAAyBiE,QAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,CAD6B;AAAA,OAAhC,CApBL,EAyBKpM,SAAS,KAAKuB,SAAd,IAA2BvB,SAAS,CAACiH,gBAAV,OAAiC1F,SAA5D,iBACG;AAAK,QAAA,SAAS,EAAC,mCAAf;AAAmD,QAAA,KAAK,EAAEG,WAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,aAAD;AACI,QAAA,IAAI,EAAE1B,SADV;AAEI,QAAA,WAAW,EAAE,KAAKmB,KAAL,CAAWO,WAF5B;AAGI,QAAA,KAAK,EAAE,KAAKgB,UAHhB;AAII,QAAA,eAAe,EAAE,KAAKC,iBAJ1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CA1BR,CAtBJ,CADJ;AA6DH;AAED;;;;;;;;;;;;;;+BAYW0J,O,EAAS;AAEhB,UAAMC,QAAQ,GAAG;AACbhL,QAAAA,OAAO,EAAE,KAAKH,KAAL,CAAWC,WADP;AAEbiL,QAAAA,OAAO,EAAEA;AAFI,OAAjB;AAIA,UAAME,OAAO,GAAG;AACZ,wBAAgB;AADJ,OAAhB;AAGAnN,MAAAA,KAAK,CACAoN,IADL,CACU,QADV,EACoBF,QADpB,EAC8B;AAAEC,QAAAA;AAAF,OAD9B,EAEKvH,IAFL,CAEU,UAACyH,QAAD,EAAc;AAChB7H,QAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACH,OAJL,EAKKI,KALL,CAKW,UAACC,KAAD;AAAA,eAAWN,OAAO,CAACC,GAAR,CAAYK,KAAZ,CAAX;AAAA,OALX;AAMH;;;iCAEYwH,O,EAAS;AAElB,UAAMJ,QAAQ,GAAG;AACbhL,QAAAA,OAAO,EAAE,KAAKH,KAAL,CAAWC,WADP;AAEbuL,QAAAA,MAAM,EAAGD;AAFI,OAAjB;AAIA,UAAMH,OAAO,GAAG;AACZ,wBAAgB;AADJ,OAAhB;AAGAnN,MAAAA,KAAK,CACAoN,IADL,CACU,cADV,EAC0BF,QAD1B,EACoC;AAAEC,QAAAA;AAAF,OADpC,EAEKvH,IAFL,CAEU,UAACyH,QAAD,EAAc;AAChB7H,QAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACH,OAJL,EAKKI,KALL,CAKW,UAACC,KAAD;AAAA,eAAWN,OAAO,CAACC,GAAR,CAAYK,KAAZ,CAAX;AAAA,OALX;AAMH;;;+BAEU;AAAA;;AACP,aAAO,KAAK0H,aAAL,CAAmB,KAAKzL,KAAL,CAAWC,WAA9B,EAA2C4D,IAA3C,CAAgD,UAAC6H,SAAD;AAAA,eAAe,OAAI,CAACC,WAAL,CAAiBD,SAAjB,CAAf;AAAA,OAAhD,CAAP;AACH;;;kCAEaA,S,EAAW;AAAA;;AACrB,aAAO,IAAIE,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,YAAIhE,IAAI,GAAGK,IAAI,CAACS,SAAL,CAAe;AAAEmD,UAAAA,eAAe,EAAEL;AAAnB,SAAf,CAAX;AACAzN,QAAAA,KAAK,CACAoN,IADL,CACU,OAAI,CAACnM,mBAAL,GAA2B,wBADrC,EAC+D4I,IAD/D,EACqE;AAC7DsD,UAAAA,OAAO,EAAE;AACLY,YAAAA,aAAa,EAAE,WAAWC,IAAI,CAAC,iBAAiB,OAAI,CAAC9M,sBAAvB,CADzB;AAEL,4BAAgB;AAFX;AADoD,SADrE,EAOK0E,IAPL,CAOU,UAACyH,QAAD,EAAc;AAChB7H,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6B4H,QAA7B;AACAO,UAAAA,OAAO,CAACP,QAAQ,CAACxD,IAAT,CAAcoE,EAAf,CAAP;AACH,SAVL,EAWKpI,KAXL,CAWW,UAACwH,QAAD,EAAc;AACjB,cAAIvH,KAAK,GAAGoI,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBd,QAAlB,CAAZ;;AACA,cAAIvH,KAAK,CAACuH,QAAN,IAAkBvH,KAAK,CAACuH,QAAN,CAAenH,MAAf,KAA0B,GAAhD,EAAqD;AACjD0H,YAAAA,OAAO,CAACH,SAAD,CAAP;AACH,WAFD,MAEO;AACHjI,YAAAA,OAAO,CAACC,GAAR,CAAYK,KAAZ;AACAN,YAAAA,OAAO,CAAC4I,IAAR,CACI,0EAA0E,OAAI,CAACnN,mBADnF;;AAGA,gBACI6D,MAAM,CAACuJ,OAAP,CACI,2EACI,OAAI,CAACpN,mBADT,GAEI,2CAFJ,GAGI,iGAHJ,GAII,OAAI,CAACA,mBAJT,GAKI,GANR,CADJ,EASE;AACE6D,cAAAA,MAAM,CAACwJ,QAAP,CAAgBH,MAAhB,CAAuB,OAAI,CAAClN,mBAAL,GAA2B,qBAAlD;AACH;AACJ;AACJ,SAjCL;AAkCH,OApCM,CAAP;AAqCH;;;gCAEWwM,S,EAAW;AAAA;;AACnB,aAAO,IAAIE,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,YAAIhE,IAAI,GAAGK,IAAI,CAACS,SAAL,CAAe,EAAf,CAAX;AACA3K,QAAAA,KAAK,CACAoN,IADL,CACU,OAAI,CAACnM,mBAAL,GAA2B,yBAA3B,GAAuDwM,SAAvD,GAAmE,aAD7E,EAC4F5D,IAD5F,EACkG;AAC1FsD,UAAAA,OAAO,EAAE;AACLY,YAAAA,aAAa,EAAE,WAAWC,IAAI,CAAC,iBAAiB,OAAI,CAAC9M,sBAAvB,CADzB;AAEL,4BAAgB;AAFX;AADiF,SADlG,EAOK0E,IAPL,CAOU,UAACyH,QAAD,EAAc;AAChB7H,UAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqB4H,QAArB;AACAO,UAAAA,OAAO,CAACP,QAAQ,CAACxD,IAAT,CAActE,KAAf,CAAP;AACH,SAVL,EAWKM,KAXL,CAWW,UAACC,KAAD;AAAA,iBAAW+H,MAAM,CAAC/H,KAAD,CAAjB;AAAA,SAXX;AAYH,OAdM,CAAP;AAeH;;;;EAnrB2C/F,S;;SAA3BgB,kB","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport './VideoRoomComponent.css';\nimport { OpenVidu } from 'openvidu-browser';\nimport StreamComponent from '../stream/StreamComponent';\nimport DialogExtensionComponent from '../dialog-extension/DialogExtension';\nimport ChatComponent from '../chat/ChatComponent';\nimport OpenViduLayout from '../../layout/openvidu-layout';\nimport UserModel from '../../models/user-model';\nimport ToolbarComponent from '../toolbar/ToolbarComponent';\nimport IpCameraComponent from '../ip-camera/IpCameraComponent';\nimport IpcamServerComponent from '../ipcam-server/IpcamServerComponent';\nimport IpCamModel from '../../models/ipcam-model';\nimport { config } from '../Constants';\n\nvar localUser = new UserModel();\n\nconst screen_share = require('../../assets/images/screen.png')\n\nexport default class VideoRoomComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.OPENVIDU_SERVER_URL = config.OPENVIDU_SERVER_URL;\n        this.OPENVIDU_SERVER_SECRET = config.OPENVIDU_SERVER_SECRET;\n        this.hasBeenUpdated = false;\n        this.layout = new OpenViduLayout();\n        let sessionName = this.props.match.params.value.replace(/-/g, '');\n        let userName = this.props.user ? this.props.user : 'IUDX_User' + Math.floor(Math.random() * 100);\n        this.state = {\n            mySessionId: sessionName,\n            myUserName: userName,\n            session: undefined,\n            localUser: undefined,\n            subscribers: [],\n            ipCamSubscribers: [],\n            chatDisplay: 'none',\n            modalOpen:false,\n            localUserOn: false,\n            groupDisplay: true,\n        };\n\n        this.joinSession = this.joinSession.bind(this);\n        this.leaveSession = this.leaveSession.bind(this);\n        this.onbeforeunload = this.onbeforeunload.bind(this);\n        this.updateLayout = this.updateLayout.bind(this);\n        this.camStatusChanged = this.camStatusChanged.bind(this);\n        this.micStatusChanged = this.micStatusChanged.bind(this);\n        this.nicknameChanged = this.nicknameChanged.bind(this);\n        this.toggleFullscreen = this.toggleFullscreen.bind(this);\n        this.screenShare = this.screenShare.bind(this);\n        this.stopScreenShare = this.stopScreenShare.bind(this);\n        this.closeDialogExtension = this.closeDialogExtension.bind(this);\n        this.toggleChat = this.toggleChat.bind(this);\n        this.checkNotification = this.checkNotification.bind(this);\n        this.checkSize = this.checkSize.bind(this);\n        this.showIPCameraDialog = this.showIPCameraDialog.bind(this);\n        this.showIPCameraServerDialog = this.showIPCameraServerDialog.bind(this);\t\n        this.setClose = this.setClose.bind(this);\n        this.getIPToken = this.getIPToken.bind(this);\n        this.removeCamera = this.removeCamera.bind(this);\n        this.groupStatusChanged = this.groupStatusChanged.bind(this);\n        this.leaveSessionPage = this.leaveSessionPage.bind(this);\n    }\n\n    componentDidMount() {\n        const openViduLayoutOptions = {\n            maxRatio: 3 / 2, // The narrowest ratio that will be used (default 2x3)\n            minRatio: 9 / 16, // The widest ratio that will be used (default 16x9)\n            fixedRatio: false, // If this is true then the aspect ratio of the video is maintained and minRatio and maxRatio are ignored (default false)\n            bigClass: 'OV_big', // The class to add to elements that should be sized bigger\n            bigPercentage: 0.8, // The maximum percentage of space the big ones should take up\n            bigFixedRatio: false, // fixedRatio for the big ones\n            bigMaxRatio: 3 / 2, // The narrowest ratio to use for the big elements (default 2x3)\n            bigMinRatio: 9 / 16, // The widest ratio to use for the big elements (default 16x9)\n            bigFirst: true, // Whether to place the big one in the top left (true) or bottom right\n            animate: true, // Whether you want to animate the transitions\n        };\n\n        this.layout.initLayoutContainer(document.getElementById('layout'), openViduLayoutOptions);\n        window.addEventListener('beforeunload', this.onbeforeunload);\n        window.addEventListener('resize', this.updateLayout);\n        window.addEventListener('resize', this.checkSize);\n        this.joinSession();\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('beforeunload', this.onbeforeunload);\n        window.removeEventListener('resize', this.updateLayout);\n        window.removeEventListener('resize', this.checkSize);\n        this.leaveSession();\n    }\n\n    onbeforeunload(event) {\n        this.leaveSession();\n    }\n\n    joinSession() {\n        this.OV = new OpenVidu();\n\n        this.setState(\n            {\n                session: this.OV.initSession(),\n            },\n            () => {\n                this.subscribeToStreamCreated();\n\n                this.connectToSession();\n            },\n        );\n    }\n\n    connectToSession() {\n        if (this.props.token !== undefined) {\n            console.log('token received: ', this.props.token);\n            this.connect(this.props.token);\n        } else {\n            this.getToken().then((token) => {\n                console.log(token);\n                this.connect(token);\n            }).catch((error) => {\n                if(this.props.error){\n                    this.props.error({ error: error.error, messgae: error.message, code: error.code, status: error.status });\n                }\n                console.log('There was an error getting the token:', error.code, error.message);\n                alert('There was an error getting the token:', error.message);\n              });\n        }\n    }\n\n    connect(token) {\n        this.state.session\n            .connect(\n                token,\n                { clientData: this.state.myUserName },\n            )\n            .then(() => {\n                this.connectWebCam();\n            })\n            .catch((error) => {\n                if(this.props.error){\n                    this.props.error({ error: error.error, messgae: error.message, code: error.code, status: error.status });\n                }\n                alert('There was an error connecting to the session:', error.message);\n                console.log('There was an error connecting to the session:', error.code, error.message);\n            });\n    }\n\n    connectWebCam() {\n        let publisher = this.OV.initPublisher(undefined, {\n            audioSource: undefined,\n            videoSource: undefined,\n            publishAudio: localUser.isAudioActive(),\n            publishVideo: localUser.isVideoActive(),\n            resolution: '640x480',\n            frameRate: 30,\n            insertMode: 'APPEND',\n        });\n\n        if (this.state.session.capabilities.publish) {\n            this.state.session.publish(publisher).then(() => {\n                if (this.props.joinSession) {\n                    this.props.joinSession();\n                }\n            });\n        }\n        localUser.setNickname(this.state.myUserName);\n        localUser.setConnectionId(this.state.session.connection.connectionId);\n        localUser.setScreenShareActive(false);\n        localUser.setStreamManager(publisher);\n        this.subscribeToUserChanged();\n        this.subscribeToStreamDestroyed();\n        this.sendSignalUserChanged({ isScreenShareActive: localUser.isScreenShareActive() });\n\n        this.setState({ localUser: localUser }, () => {\n            this.state.localUser.getStreamManager().on('streamPlaying', (e) => {\n                this.updateLayout();\n                publisher.videos[0].video.parentElement.classList.remove('custom-class');\n            });\n        });\n    }\n\n    leaveSession(e) {\n        const mySession = this.state.session;\n\n        if (mySession) {\n            mySession.disconnect();\n        }\n\n        // Empty all properties...\n        this.OV = null;\n        this.setState({\n            session: undefined,\n            subscribers: [],\n            ipCamSubscribers: [],\n            mySessionId: 'SessionA',\n            myUserName: 'IUDX_User' + Math.floor(Math.random() * 100),\n            localUser: undefined,\n            chatDisplay: 'none',\n            modalOpen: false,\n            serverModalOpen: false,\n            localUserOn: false,\n            groupDisplay: true,\n        });\n        localUser.setAudioActive(true);\n        localUser.setVideoActive(false);\n        localUser.setGroupActive(true);\n        if (this.props.leaveSession) {\n            this.props.leaveSession();\n        }   \n    }\n\n    leaveSessionPage() {\n        this.props.history.goBack();\n    }\n\n    camStatusChanged() {\n        localUser.setVideoActive(!localUser.isVideoActive());\n        localUser.getStreamManager().publishVideo(localUser.isVideoActive());\n        this.sendSignalUserChanged({ isVideoActive: localUser.isVideoActive() });\n        this.setState({ localUser: localUser });\n        this.setState({ localUserOn: !this.state.localUserOn})\n    }\n\n    micStatusChanged() {\n        localUser.setAudioActive(!localUser.isAudioActive());\n        localUser.getStreamManager().publishAudio(localUser.isAudioActive());\n        this.sendSignalUserChanged({ isAudioActive: localUser.isAudioActive() });\n        this.setState({ localUser: localUser });\n    }\n\n    nicknameChanged(nickname) {\n        let localUser = this.state.localUser;\n        localUser.setNickname(nickname);\n        this.setState({ localUser: localUser });\n        this.sendSignalUserChanged({ nickname: this.state.localUser.getNickname() });\n    }\n\n    deleteSubscriber(stream) {\n        if(stream.typeOfVideo === 'IPCAM') {\n            const remoteCams = this.state.ipCamSubscribers;\n            const camStream = remoteCams.filter((user) => user.getStreamManager().stream === stream)[0];\n            let index = remoteCams.indexOf(camStream, 0);\n            if (index > -1) {\n                remoteCams.splice(index, 1);\n                this.setState({\n                    ipCamSubscribers: remoteCams,\n                });\n            }\n        }\n        else {\n            const remoteUsers = this.state.subscribers;\n            const userStream = remoteUsers.filter((user) => user.getStreamManager().stream === stream)[0];\n            let index = remoteUsers.indexOf(userStream, 0);\n            if (index > -1) {\n                remoteUsers.splice(index, 1);\n                this.setState({\n                    subscribers: remoteUsers,\n                });\n            }\n        }\n    }\n\n    subscribeToStreamCreated() {\n        this.state.session.on('streamCreated', (event) => {\n            const subscriber = this.state.session.subscribe(event.stream, undefined);\n            \n            if(event.stream.typeOfVideo === 'IPCAM') {\n                var ipCamSubscribers = this.state.ipCamSubscribers;\n                subscriber.on('streamPlaying', (e) => {\n                    subscriber.videos[0].video.parentElement.classList.remove('custom-class');\n                });\n                const newCam = new IpCamModel();\n                newCam.setStreamManager(subscriber);\n                newCam.setConnectionId(event.stream.connection.connectionId);\n                newCam.setType('ipcam');\n                newCam.setNickname(event.stream.connection.data);\n                ipCamSubscribers.push(newCam);\n                this.setState(\n                    {\n                        ipCamSubscribers: ipCamSubscribers,\n                    },\n                    () => {\n                        if (this.state.localUser) {\n                            this.sendSignalUserChanged({\n                                isAudioActive: this.state.localUser.isAudioActive(),\n                                isVideoActive: this.state.localUser.isVideoActive(),\n                                nickname: this.state.localUser.getNickname(),\n                                isScreenShareActive: this.state.localUser.isScreenShareActive(),\n                            });\n                        }\n                        this.updateLayout();\n                    },\n                );\n            }\n            else {\n                var subscribers = this.state.subscribers;\n                subscriber.on('streamPlaying', (e) => {\n                    this.checkSomeoneShareScreen();\n                    subscriber.videos[0].video.parentElement.classList.remove('custom-class');\n                });\n                const newUser = new UserModel();\n                newUser.setStreamManager(subscriber);\n                newUser.setConnectionId(event.stream.connection.connectionId);\n                newUser.setType('remote');\n                var nickname = event.stream.connection.data.split('%')[0];\n                newUser.setNickname(JSON.parse(nickname).clientData);\n                subscribers.push(newUser);\n                this.setState(\n                    {\n                        subscribers: subscribers,\n                    },\n                    () => {\n                        if (this.state.localUser) {\n                            this.sendSignalUserChanged({\n                                isAudioActive: this.state.localUser.isAudioActive(),\n                                isVideoActive: this.state.localUser.isVideoActive(),\n                                nickname: this.state.localUser.getNickname(),\n                                isScreenShareActive: this.state.localUser.isScreenShareActive(),\n                            });\n                        }\n                        this.updateLayout();\n                    },\n                );\n            }\n        });\n    }\n\n    subscribeToStreamDestroyed() {\n        // On every Stream destroyed...\n        this.state.session.on('streamDestroyed', (event) => {\n            // Remove the stream from 'subscribers' array\n            this.deleteSubscriber(event.stream);\n            setTimeout(() => {\n                this.checkSomeoneShareScreen();\n            }, 20);\n            event.preventDefault();\n            this.updateLayout();\n        });\n    }\n\n    subscribeToUserChanged() {\n        this.state.session.on('signal:userChanged', (event) => {\n            let remoteUsers = this.state.subscribers;\n            remoteUsers.forEach((user) => {\n                if (user.getConnectionId() === event.from.connectionId) {\n                    const data = JSON.parse(event.data);\n                    console.log('EVENTO REMOTE: ', event.data);\n                    if (data.isAudioActive !== undefined) {\n                        user.setAudioActive(data.isAudioActive);\n                    }\n                    if (data.isVideoActive !== undefined) {\n                        user.setVideoActive(data.isVideoActive);\n                    }\n                    if (data.nickname !== undefined) {\n                        user.setNickname(data.nickname);\n                    }\n                    if (data.isScreenShareActive !== undefined) {\n                        user.setScreenShareActive(data.isScreenShareActive);\n                    }\n                }\n            });\n            this.setState(\n                {\n                    subscribers: remoteUsers,\n                },\n                () => this.checkSomeoneShareScreen(),\n            );\n        });\n    }\n\n    updateLayout() {\n        setTimeout(() => {\n            this.layout.updateLayout();\n        }, 20);\n    }\n\n    sendSignalUserChanged(data) {\n        const signalOptions = {\n            data: JSON.stringify(data),\n            type: 'userChanged',\n        };\n        this.state.session.signal(signalOptions);\n    }\n\n    toggleFullscreen() {\n        const document = window.document;\n        const fs = document.getElementById('container');\n        if (\n            !document.fullscreenElement &&\n            !document.mozFullScreenElement &&\n            !document.webkitFullscreenElement &&\n            !document.msFullscreenElement\n        ) {\n            if (fs.requestFullscreen) {\n                fs.requestFullscreen();\n            } else if (fs.msRequestFullscreen) {\n                fs.msRequestFullscreen();\n            } else if (fs.mozRequestFullScreen) {\n                fs.mozRequestFullScreen();\n            } else if (fs.webkitRequestFullscreen) {\n                fs.webkitRequestFullscreen();\n            }\n        } else {\n            if (document.exitFullscreen) {\n                document.exitFullscreen();\n            } else if (document.msExitFullscreen) {\n                document.msExitFullscreen();\n            } else if (document.mozCancelFullScreen) {\n                document.mozCancelFullScreen();\n            } else if (document.webkitExitFullscreen) {\n                document.webkitExitFullscreen();\n            }\n        }\n    }\n\n    screenShare() {\n        const videoSource = navigator.userAgent.indexOf('Firefox') !== -1 ? 'window' : 'screen';\n        const publisher = this.OV.initPublisher(\n            undefined,\n            {\n                videoSource: videoSource,\n                publishAudio: localUser.isAudioActive(),\n                publishVideo: localUser.isVideoActive(),\n                mirror: false,\n            },\n            (error) => {\n                if (error && error.name === 'SCREEN_EXTENSION_NOT_INSTALLED') {\n                    this.setState({ showExtensionDialog: true });\n                } else if (error && error.name === 'SCREEN_SHARING_NOT_SUPPORTED') {\n                    alert('Your browser does not support screen sharing');\n                } else if (error && error.name === 'SCREEN_EXTENSION_DISABLED') {\n                    alert('You need to enable screen sharing extension');\n                } else if (error && error.name === 'SCREEN_CAPTURE_DENIED') {\n                    alert('You need to choose a window or application to share');\n                }\n            },\n        );\n\n        publisher.once('accessAllowed', () => {\n            this.state.session.unpublish(localUser.getStreamManager());\n            localUser.setStreamManager(publisher);\n            this.state.session.publish(localUser.getStreamManager()).then(() => {\n                localUser.setScreenShareActive(true);\n                this.setState({ localUser: localUser }, () => {\n                    this.sendSignalUserChanged({ isScreenShareActive: localUser.isScreenShareActive() });\n                });\n            });\n        });\n        publisher.on('streamPlaying', () => {\n            this.updateLayout();\n            publisher.videos[0].video.parentElement.classList.remove('custom-class');\n        });\n    }\n\n    closeDialogExtension() {\n        this.setState({ showExtensionDialog: false });\n    }\n\n    stopScreenShare() {\n        this.state.session.unpublish(localUser.getStreamManager());\n        this.connectWebCam();\n    }\n\n    groupStatusChanged() {\n        localUser.setGroupActive(!this.state.groupDisplay);\n        this.sendSignalUserChanged({ isGroupActive: localUser.isGroupActive() });\n        this.setState({ groupDisplay: !this.state.groupDisplay });\n    }\n\n    checkSomeoneShareScreen() {\n        let isScreenShared;\n        // return true if at least one passes the test\n        isScreenShared = this.state.subscribers.some((user) => user.isScreenShareActive()) || localUser.isScreenShareActive();\n        const openviduLayoutOptions = {\n            maxRatio: 3 / 2,\n            minRatio: 9 / 16,\n            fixedRatio: isScreenShared,\n            bigClass: 'OV_big',\n            bigPercentage: 0.8,\n            bigFixedRatio: false,\n            bigMaxRatio: 3 / 2,\n            bigMinRatio: 9 / 16,\n            bigFirst: true,\n            animate: true,\n        };\n        this.layout.setLayoutOptions(openviduLayoutOptions);\n        this.updateLayout();\n    }\n\n    toggleChat(property) {\n        let display = property;\n\n        if (display === undefined) {\n            display = this.state.chatDisplay === 'none' ? 'block' : 'none';\n        }\n        if (display === 'block') {\n            this.setState({ chatDisplay: display, messageReceived: false });\n        } else {\n            console.log('chat', display);\n            this.setState({ chatDisplay: display });\n        }\n        this.updateLayout();\n    }\n\n    checkNotification(event) {\n        this.setState({\n            messageReceived: this.state.chatDisplay === 'none',\n        });\n    }\n\n    checkSize() {\n        if (document.getElementById('layout').offsetWidth <= 700 && !this.hasBeenUpdated) {\n            this.toggleChat('none');\n            this.hasBeenUpdated = true;\n        }\n        if (document.getElementById('layout').offsetWidth > 700 && this.hasBeenUpdated) {\n            this.hasBeenUpdated = false;\n        }\n    }\n\n    showIPCameraDialog(){\n        this.setState({modalOpen:!this.state.modalOpen});\n    }\n       \n    showIPCameraServerDialog(){\n        this.setState({serverModalOpen:!this.state.serverModalOpen});\n    }\n\n    setClose(){\n        this.setState({modalOpen:!this.state.modalOpen});\n    }\n\n    setServerClose(){\n        this.setState({serverModalOpen:!this.state.serverModalOpen});\n    }\n\n    render() {\n        const mySessionId = this.state.mySessionId;\n        const localUser = this.state.localUser;\n        var chatDisplay = { display: this.state.chatDisplay };\n\n        return (\n            <div className=\"container\" id=\"container\">\n                <ToolbarComponent\n                    sessionId={mySessionId}\n                    user={localUser}\n                    showNotification={this.state.messageReceived}\n                    camStatusChanged={this.camStatusChanged}\n                    micStatusChanged={this.micStatusChanged}\n                    groupStatusChanged={this.groupStatusChanged}\n                    screenShare={this.screenShare}\n                    stopScreenShare={this.stopScreenShare}\n                    toggleFullscreen={this.toggleFullscreen}\n                    leaveSessionPage={this.leaveSessionPage}\n                    toggleChat={this.toggleChat}\n                    showIPCameraDialog= {this.showIPCameraDialog}\n                    showIPCameraServerDialog={this.showIPCameraServerDialog}\n                />\n\n                <DialogExtensionComponent showDialog={this.state.showExtensionDialog} cancelClicked={this.closeDialogExtension} />\n                <IpCameraComponent open={this.state.modalOpen} setClose={this.setClose} getToken={this.getIPToken} removeCam={this.removeCamera}/>\n                <IpcamServerComponent open={this.state.serverModalOpen} setClose={this.setServerClose} getToken={this.getIPToken} removeCam={this.removeCamera}/>\n\n\n                <div id=\"layout\" className=\"bounds\">\n                    {this.state.localUserOn && localUser !== undefined && localUser.getStreamManager() !== undefined && (\n                        localUser.isScreenShareActive() ? (\n                            <div id=\"screenshare\">\n                                <ul>\n                                    <li><img alt=\"Screen Sharing\" src={screen_share} /></li>\n                                    <li><h1>You're presenting to everyone</h1></li>\n                                </ul>\n                            </div>\n                        ) : (\n                            <div className=\"OT_root OT_publisher custom-class\" id=\"localUser\">\n                                <StreamComponent user={localUser} handleNickname={this.nicknameChanged} />\n                            </div>\n                        )\n                    )}\n                    {this.state.groupDisplay && this.state.subscribers.map((sub, i) => (\n                        <div key={i} className=\"OT_root OT_publisher custom-class\" id=\"remoteUsers\">\n                            <StreamComponent user={sub} streamId={sub.streamManager.stream.streamId} />\n                        </div>\n                    ))}\n                    {this.state.ipCamSubscribers.map((sub, i) => (\t\n                        <div key={i} className=\"OT_root OT_publisher custom-class\" id=\"remoteCam\">\n                            <StreamComponent user={sub} streamId={sub.streamManager.stream.streamId} />\n                        </div>\t\n                    ))}\n                    {localUser !== undefined && localUser.getStreamManager() !== undefined && (\n                        <div className=\"OT_root OT_publisher custom-class\" style={chatDisplay}>\n                            <ChatComponent\n                                user={localUser}\n                                chatDisplay={this.state.chatDisplay}\n                                close={this.toggleChat}\n                                messageReceived={this.checkNotification}\n                            />\n                        </div>\n                    )}\n                </div>\n            </div>\n        );\n    }\n\n    /**\n     * --------------------------\n     * SERVER-SIDE RESPONSIBILITY\n     * --------------------------\n     * These methods retrieve the mandatory user token from OpenVidu Server.\n     * This behaviour MUST BE IN YOUR SERVER-SIDE IN PRODUCTION (by using\n     * the API REST, openvidu-java-client or openvidu-node-client):\n     *   1) Initialize a session in OpenVidu Server\t(POST /api/sessions)\n     *   2) Generate a token in OpenVidu Server\t\t(POST /api/tokens)\n     *   3) The token must be consumed in Session.connect() method\n     */\n    \n    getIPToken(cameras) {\n\n        const sendData = {\n            session: this.state.mySessionId,\n            cameras: cameras\n        };\n        const headers = {\n            'Content-Type': 'application/json'\n        };\n        axios\n            .post('/ipcam', sendData, { headers })\n            .then((response) => {\n                console.log('connection success!');\n            })\n            .catch((error) => console.log(error))\n    }\n\n    removeCamera(camName) {\n\n        const sendData = { \n            session: this.state.mySessionId,\n            camera : camName \n        };\n        const headers = {\n            'Content-Type': 'application/json'\n        };\n        axios\n            .post('/deleteipcam', sendData, { headers })\n            .then((response) => {\n                console.log('Disconnection success!');\n            })\n            .catch((error) => console.log(error))\n    }\n\n    getToken() {\n        return this.createSession(this.state.mySessionId).then((sessionId) => this.createToken(sessionId));\n    }\n\n    createSession(sessionId) {\n        return new Promise((resolve, reject) => {\n            var data = JSON.stringify({ customSessionId: sessionId });\n            axios\n                .post(this.OPENVIDU_SERVER_URL + '/openvidu/api/sessions', data, {\n                    headers: {\n                        Authorization: 'Basic ' + btoa('OPENVIDUAPP:' + this.OPENVIDU_SERVER_SECRET),\n                        'Content-Type': 'application/json',\n                    },\n                })\n                .then((response) => {\n                    console.log('CREATE SESION', response);\n                    resolve(response.data.id);\n                })\n                .catch((response) => {\n                    var error = Object.assign({}, response);\n                    if (error.response && error.response.status === 409) {\n                        resolve(sessionId);\n                    } else {\n                        console.log(error);\n                        console.warn(\n                            'No connection to OpenVidu Server. This may be a certificate error at ' + this.OPENVIDU_SERVER_URL,\n                        );\n                        if (\n                            window.confirm(\n                                'No connection to OpenVidu Server. This may be a certificate error at \"' +\n                                    this.OPENVIDU_SERVER_URL +\n                                    '\"\\n\\nClick OK to navigate and accept it. ' +\n                                    'If no certificate warning is shown, then check that your OpenVidu Server is up and running at \"' +\n                                    this.OPENVIDU_SERVER_URL +\n                                    '\"',\n                            )\n                        ) {\n                            window.location.assign(this.OPENVIDU_SERVER_URL + '/accept-certificate');\n                        }\n                    }\n                });\n        });\n    }\n\n    createToken(sessionId) {\n        return new Promise((resolve, reject) => {\n            var data = JSON.stringify({});\n            axios\n                .post(this.OPENVIDU_SERVER_URL + '/openvidu/api/sessions/' + sessionId + '/connection', data, {\n                    headers: {\n                        Authorization: 'Basic ' + btoa('OPENVIDUAPP:' + this.OPENVIDU_SERVER_SECRET),\n                        'Content-Type': 'application/json',\n                    },\n                })\n                .then((response) => {\n                    console.log('TOKEN', response);\n                    resolve(response.data.token);\n                })\n                .catch((error) => reject(error));\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}