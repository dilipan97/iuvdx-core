{"ast":null,"code":"import _classCallCheck from \"/home/dilip/Desktop/iuvdx-core/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/dilip/Desktop/iuvdx-core/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport $ from 'jquery';\n\nvar OpenViduLayout = /*#__PURE__*/function () {\n  function OpenViduLayout() {\n    _classCallCheck(this, OpenViduLayout);\n  }\n\n  _createClass(OpenViduLayout, [{\n    key: \"fixAspectRatio\",\n    value: function fixAspectRatio(elem, width) {\n      var sub = elem.querySelector('.OT_root');\n\n      if (sub) {\n        // If this is the parent of a subscriber or publisher then we need\n        // to force the mutation observer on the publisher or subscriber to\n        // trigger to get it to fix it's layout\n        var oldWidth = sub.style.width;\n        sub.style.width = width + 'px'; // sub.style.height = height + 'px';\n\n        sub.style.width = oldWidth || '';\n      }\n    }\n  }, {\n    key: \"positionElement\",\n    value: function positionElement(elem, x, y, width, height, animate) {\n      var _this = this;\n\n      var targetPosition = {\n        left: x + 'px',\n        top: y + 'px',\n        width: width + 'px',\n        height: height + 'px'\n      };\n      this.fixAspectRatio(elem, width);\n\n      if (animate && $) {\n        $(elem).stop();\n        $(elem).animate(targetPosition, animate.duration || 200, animate.easing || 'swing', function () {\n          _this.fixAspectRatio(elem, width);\n\n          if (animate.complete) {\n            animate.complete.call(_this);\n          }\n        });\n      } else {\n        $(elem).css(targetPosition);\n      }\n\n      this.fixAspectRatio(elem, width);\n    }\n  }, {\n    key: \"getVideoRatio\",\n    value: function getVideoRatio(elem) {\n      if (!elem) {\n        return 3 / 4;\n      }\n\n      var video = elem.querySelector('video');\n\n      if (video && video.videoHeight && video.videoWidth) {\n        return video.videoHeight / video.videoWidth;\n      } else if (elem.videoHeight && elem.videoWidth) {\n        return elem.videoHeight / elem.videoWidth;\n      }\n\n      return 3 / 4;\n    }\n  }, {\n    key: \"getCSSNumber\",\n    value: function getCSSNumber(elem, prop) {\n      var cssStr = $(elem).css(prop);\n      return cssStr ? parseInt(cssStr, 10) : 0;\n    } // Really cheap UUID function\n\n  }, {\n    key: \"cheapUUID\",\n    value: function cheapUUID() {\n      return (Math.random() * 100000000).toFixed(0);\n    }\n  }, {\n    key: \"getHeight\",\n    value: function getHeight(elem) {\n      var heightStr = $(elem).css('height');\n      return heightStr ? parseInt(heightStr, 10) : 0;\n    }\n  }, {\n    key: \"getWidth\",\n    value: function getWidth(elem) {\n      var widthStr = $(elem).css('width');\n      return widthStr ? parseInt(widthStr, 10) : 0;\n    }\n  }, {\n    key: \"getBestDimensions\",\n    value: function getBestDimensions(minR, maxR, count, WIDTH, HEIGHT, targetHeight) {\n      var maxArea, targetCols, targetRows, targetWidth, tWidth, tHeight, tRatio; // Iterate through every possible combination of rows and columns\n      // and see which one has the least amount of whitespace\n\n      for (var i = 1; i <= count; i++) {\n        var colsAux = i;\n        var rowsAux = Math.ceil(count / colsAux); // Try taking up the whole height and width\n\n        tHeight = Math.floor(HEIGHT / rowsAux);\n        tWidth = Math.floor(WIDTH / colsAux);\n        tRatio = tHeight / tWidth;\n\n        if (tRatio > maxR) {\n          // We went over decrease the height\n          tRatio = maxR;\n          tHeight = tWidth * tRatio;\n        } else if (tRatio < minR) {\n          // We went under decrease the width\n          tRatio = minR;\n          tWidth = tHeight / tRatio;\n        }\n\n        var area = tWidth * tHeight * count; // If this width and height takes up the most space then we're going with that\n\n        if (maxArea === undefined || area > maxArea) {\n          maxArea = area;\n          targetHeight = tHeight;\n          targetWidth = tWidth;\n          targetCols = colsAux;\n          targetRows = rowsAux;\n        }\n      }\n\n      return {\n        maxArea: maxArea,\n        targetCols: targetCols,\n        targetRows: targetRows,\n        targetHeight: targetHeight,\n        targetWidth: targetWidth,\n        ratio: targetHeight / targetWidth\n      };\n    }\n  }, {\n    key: \"arrange\",\n    value: function arrange(children, WIDTH, HEIGHT, offsetLeft, offsetTop, fixedRatio, minRatio, maxRatio, animate) {\n      var targetHeight;\n      var count = children.length;\n      var dimensions;\n\n      if (!fixedRatio) {\n        dimensions = this.getBestDimensions(minRatio, maxRatio, count, WIDTH, HEIGHT, targetHeight);\n      } else {\n        // Use the ratio of the first video element we find to approximate\n        var ratio = this.getVideoRatio(children.length > 0 ? children[0] : null);\n        dimensions = this.getBestDimensions(ratio, ratio, count, WIDTH, HEIGHT, targetHeight);\n      } // Loop through each stream in the container and place it inside\n\n\n      var x = 0,\n          y = 0;\n      var rows = [];\n      var row; // Iterate through the children and create an array with a new item for each row\n      // and calculate the width of each row so that we know if we go over the size and need\n      // to adjust\n\n      for (var i = 0; i < children.length; i++) {\n        if (i % dimensions.targetCols === 0) {\n          // This is a new row\n          row = {\n            children: [],\n            width: 0,\n            height: 0\n          };\n          rows.push(row);\n        }\n\n        var elem = children[i];\n        row.children.push(elem);\n        var targetWidth = dimensions.targetWidth;\n        targetHeight = dimensions.targetHeight; // If we're using a fixedRatio then we need to set the correct ratio for this element\n\n        if (fixedRatio) {\n          targetWidth = targetHeight / this.getVideoRatio(elem);\n        }\n\n        row.width += targetWidth;\n        row.height = targetHeight;\n      } // Calculate total row height adjusting if we go too wide\n\n\n      var totalRowHeight = 0;\n      var remainingShortRows = 0;\n\n      for (var _i = 0; _i < rows.length; _i++) {\n        row = rows[_i];\n\n        if (row.width > WIDTH) {\n          // Went over on the width, need to adjust the height proportionally\n          row.height = Math.floor(row.height * (WIDTH / row.width));\n          row.width = WIDTH;\n        } else if (row.width < WIDTH) {\n          remainingShortRows += 1;\n        }\n\n        totalRowHeight += row.height;\n      }\n\n      if (totalRowHeight < HEIGHT && remainingShortRows > 0) {\n        // We can grow some of the rows, we're not taking up the whole height\n        var remainingHeightDiff = HEIGHT - totalRowHeight;\n        totalRowHeight = 0;\n\n        for (var _i2 = 0; _i2 < rows.length; _i2++) {\n          row = rows[_i2];\n\n          if (row.width < WIDTH) {\n            // Evenly distribute the extra height between the short rows\n            var extraHeight = remainingHeightDiff / remainingShortRows;\n\n            if (extraHeight / row.height > (WIDTH - row.width) / row.width) {\n              // We can't go that big or we'll go too wide\n              extraHeight = Math.floor((WIDTH - row.width) / row.width * row.height);\n            }\n\n            row.width += Math.floor(extraHeight / row.height * row.width);\n            row.height += extraHeight;\n            remainingHeightDiff -= extraHeight;\n            remainingShortRows -= 1;\n          }\n\n          totalRowHeight += row.height;\n        }\n      } // vertical centering\n\n\n      y = (HEIGHT - totalRowHeight) / 2; // Iterate through each row and place each child\n\n      for (var _i3 = 0; _i3 < rows.length; _i3++) {\n        row = rows[_i3]; // center the row\n\n        var rowMarginLeft = (WIDTH - row.width) / 2;\n        x = rowMarginLeft;\n\n        for (var j = 0; j < row.children.length; j++) {\n          var _elem = row.children[j];\n          var _targetWidth = dimensions.targetWidth;\n          targetHeight = row.height; // If we're using a fixedRatio then we need to set the correct ratio for this element\n\n          if (fixedRatio) {\n            _targetWidth = Math.floor(targetHeight / this.getVideoRatio(_elem));\n          }\n\n          _elem.style.position = 'absolute'; // $(elem).css('position', 'absolute');\n\n          var actualWidth = _targetWidth - this.getCSSNumber(_elem, 'paddingLeft') - this.getCSSNumber(_elem, 'paddingRight') - this.getCSSNumber(_elem, 'marginLeft') - this.getCSSNumber(_elem, 'marginRight') - this.getCSSNumber(_elem, 'borderLeft') - this.getCSSNumber(_elem, 'borderRight');\n          var actualHeight = targetHeight - this.getCSSNumber(_elem, 'paddingTop') - this.getCSSNumber(_elem, 'paddingBottom') - this.getCSSNumber(_elem, 'marginTop') - this.getCSSNumber(_elem, 'marginBottom') - this.getCSSNumber(_elem, 'borderTop') - this.getCSSNumber(_elem, 'borderBottom');\n          this.positionElement(_elem, x + offsetLeft, y + offsetTop, actualWidth, actualHeight, animate);\n          x += _targetWidth;\n        }\n\n        y += targetHeight;\n      }\n    }\n  }, {\n    key: \"filterDisplayNone\",\n    value: function filterDisplayNone(element) {\n      return element.style.display !== 'none';\n    }\n  }, {\n    key: \"updateLayout\",\n    value: function updateLayout() {\n      if (this.layoutContainer.style.display === 'none') {\n        return;\n      }\n\n      var id = this.layoutContainer.id;\n\n      if (!id) {\n        id = 'OT_' + this.cheapUUID();\n        this.layoutContainer.id = id;\n      }\n\n      var HEIGHT = this.getHeight(this.layoutContainer) - this.getCSSNumber(this.layoutContainer, 'borderTop') - this.getCSSNumber(this.layoutContainer, 'borderBottom');\n      var WIDTH = this.getWidth(this.layoutContainer) - this.getCSSNumber(this.layoutContainer, 'borderLeft') - this.getCSSNumber(this.layoutContainer, 'borderRight');\n      var availableRatio = HEIGHT / WIDTH;\n      var offsetLeft = 0;\n      var offsetTop = 0;\n      var bigOffsetTop = 0;\n      var bigOffsetLeft = 0;\n      var bigOnes = Array.prototype.filter.call(this.layoutContainer.querySelectorAll('#' + id + '>.' + this.opts.bigClass), this.filterDisplayNone);\n      var smallOnes = Array.prototype.filter.call(this.layoutContainer.querySelectorAll('#' + id + '>*:not(.' + this.opts.bigClass + ')'), this.filterDisplayNone);\n\n      if (bigOnes.length > 0 && smallOnes.length > 0) {\n        var bigWidth, bigHeight;\n\n        if (availableRatio > this.getVideoRatio(bigOnes[0])) {\n          // We are tall, going to take up the whole width and arrange small\n          // guys at the bottom\n          bigWidth = WIDTH;\n          bigHeight = Math.floor(HEIGHT * this.opts.bigPercentage);\n          offsetTop = bigHeight;\n          bigOffsetTop = HEIGHT - offsetTop;\n        } else {\n          // We are wide, going to take up the whole height and arrange the small\n          // guys on the right\n          bigHeight = HEIGHT;\n          bigWidth = Math.floor(WIDTH * this.opts.bigPercentage);\n          offsetLeft = bigWidth;\n          bigOffsetLeft = WIDTH - offsetLeft;\n        }\n\n        if (this.opts.bigFirst) {\n          this.arrange(bigOnes, bigWidth, bigHeight, 0, 0, this.opts.bigFixedRatio, this.opts.bigMinRatio, this.opts.bigMaxRatio, this.opts.animate);\n          this.arrange(smallOnes, WIDTH - offsetLeft, HEIGHT - offsetTop, offsetLeft, offsetTop, this.opts.fixedRatio, this.opts.minRatio, this.opts.maxRatio, this.opts.animate);\n        } else {\n          this.arrange(smallOnes, WIDTH - offsetLeft, HEIGHT - offsetTop, 0, 0, this.opts.fixedRatio, this.opts.minRatio, this.opts.maxRatio, this.opts.animate);\n          this.arrange(bigOnes, bigWidth, bigHeight, bigOffsetLeft, bigOffsetTop, this.opts.bigFixedRatio, this.opts.bigMinRatio, this.opts.bigMaxRatio, this.opts.animate);\n        }\n      } else if (bigOnes.length > 0 && smallOnes.length === 0) {\n        this // We only have one bigOne just center it\n        .arrange(bigOnes, WIDTH, HEIGHT, 0, 0, this.opts.bigFixedRatio, this.opts.bigMinRatio, this.opts.bigMaxRatio, this.opts.animate);\n      } else {\n        this.arrange(smallOnes, WIDTH - offsetLeft, HEIGHT - offsetTop, offsetLeft, offsetTop, this.opts.fixedRatio, this.opts.minRatio, this.opts.maxRatio, this.opts.animate);\n      }\n    }\n  }, {\n    key: \"initLayoutContainer\",\n    value: function initLayoutContainer(container, opts) {\n      this.opts = {\n        maxRatio: opts.maxRatio != null ? opts.maxRatio : 3 / 2,\n        minRatio: opts.minRatio != null ? opts.minRatio : 9 / 16,\n        fixedRatio: opts.fixedRatio != null ? opts.fixedRatio : false,\n        animate: opts.animate != null ? opts.animate : false,\n        bigClass: opts.bigClass != null ? opts.bigClass : 'OT_big',\n        bigPercentage: opts.bigPercentage != null ? opts.bigPercentage : 0.8,\n        bigFixedRatio: opts.bigFixedRatio != null ? opts.bigFixedRatio : false,\n        bigMaxRatio: opts.bigMaxRatio != null ? opts.bigMaxRatio : 3 / 2,\n        bigMinRatio: opts.bigMinRatio != null ? opts.bigMinRatio : 9 / 16,\n        bigFirst: opts.bigFirst != null ? opts.bigFirst : true\n      };\n      this.layoutContainer = typeof container === 'string' ? $(container) : container;\n    }\n  }, {\n    key: \"setLayoutOptions\",\n    value: function setLayoutOptions(options) {\n      this.opts = options;\n    }\n  }]);\n\n  return OpenViduLayout;\n}();\n\nexport default OpenViduLayout;","map":{"version":3,"sources":["/home/dilip/Desktop/iuvdx-core/client/src/layout/openvidu-layout.js"],"names":["$","OpenViduLayout","elem","width","sub","querySelector","oldWidth","style","x","y","height","animate","targetPosition","left","top","fixAspectRatio","stop","duration","easing","complete","call","css","video","videoHeight","videoWidth","prop","cssStr","parseInt","Math","random","toFixed","heightStr","widthStr","minR","maxR","count","WIDTH","HEIGHT","targetHeight","maxArea","targetCols","targetRows","targetWidth","tWidth","tHeight","tRatio","i","colsAux","rowsAux","ceil","floor","area","undefined","ratio","children","offsetLeft","offsetTop","fixedRatio","minRatio","maxRatio","length","dimensions","getBestDimensions","getVideoRatio","rows","row","push","totalRowHeight","remainingShortRows","remainingHeightDiff","extraHeight","rowMarginLeft","j","position","actualWidth","getCSSNumber","actualHeight","positionElement","element","display","layoutContainer","id","cheapUUID","getHeight","getWidth","availableRatio","bigOffsetTop","bigOffsetLeft","bigOnes","Array","prototype","filter","querySelectorAll","opts","bigClass","filterDisplayNone","smallOnes","bigWidth","bigHeight","bigPercentage","bigFirst","arrange","bigFixedRatio","bigMinRatio","bigMaxRatio","container","options"],"mappings":"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","sourcesContent":["import $ from 'jquery';\n\nclass OpenViduLayout {\n  layoutContainer;\n  opts ;\n\n  fixAspectRatio(elem, width) {\n    const sub = elem.querySelector('.OT_root');\n    if (sub) {\n      // If this is the parent of a subscriber or publisher then we need\n      // to force the mutation observer on the publisher or subscriber to\n      // trigger to get it to fix it's layout\n      const oldWidth = sub.style.width;\n      sub.style.width = width + 'px';\n      // sub.style.height = height + 'px';\n      sub.style.width = oldWidth || '';\n    }\n  }\n\n positionElement(elem, x, y, width, height, animate) {\n    const targetPosition = {\n      left: x + 'px',\n      top: y + 'px',\n      width: width + 'px',\n      height: height + 'px',\n    };\n\n    this.fixAspectRatio(elem, width);\n\n    if (animate && $) {\n      $(elem).stop();\n      $(elem).animate(targetPosition, animate.duration || 200, animate.easing || 'swing', () => {\n        this.fixAspectRatio(elem, width);\n        if (animate.complete) {\n          animate.complete.call(this);\n        }\n      });\n    } else {\n      $(elem).css(targetPosition);\n    }\n    this.fixAspectRatio(elem, width);\n  }\n\n  getVideoRatio(elem) {\n    if (!elem) {\n      return 3 / 4;\n    }\n    const video = elem.querySelector('video');\n    if (video && video.videoHeight && video.videoWidth) {\n      return video.videoHeight / video.videoWidth;\n    } else if (elem.videoHeight && elem.videoWidth) {\n      return elem.videoHeight / elem.videoWidth;\n    }\n    return 3 / 4;\n  }\n\n   getCSSNumber(elem, prop) {\n    const cssStr = $(elem).css(prop);\n    return cssStr ? parseInt(cssStr, 10) : 0;\n  }\n\n  // Really cheap UUID function\n   cheapUUID() {\n    return (Math.random() * 100000000).toFixed(0);\n  }\n\n   getHeight(elem) {\n    const heightStr = $(elem).css('height');\n    return heightStr ? parseInt(heightStr, 10) : 0;\n  }\n\n   getWidth(elem) {\n    const widthStr = $(elem).css('width');\n    return widthStr ? parseInt(widthStr, 10) : 0;\n  }\n\n   getBestDimensions(minR , maxR , count , WIDTH, HEIGHT, targetHeight) {\n    let maxArea, targetCols, targetRows, targetWidth, tWidth, tHeight, tRatio;\n\n    // Iterate through every possible combination of rows and columns\n    // and see which one has the least amount of whitespace\n    for (let i = 1; i <= count; i++) {\n      const colsAux = i;\n      const rowsAux = Math.ceil(count / colsAux);\n\n      // Try taking up the whole height and width\n      tHeight = Math.floor(HEIGHT / rowsAux);\n      tWidth = Math.floor(WIDTH / colsAux);\n\n      tRatio = tHeight / tWidth;\n      if (tRatio > maxR) {\n        // We went over decrease the height\n        tRatio = maxR;\n        tHeight = tWidth * tRatio;\n      } else if (tRatio < minR) {\n        // We went under decrease the width\n        tRatio = minR;\n        tWidth = tHeight / tRatio;\n      }\n\n      const area = tWidth * tHeight * count;\n\n      // If this width and height takes up the most space then we're going with that\n      if (maxArea === undefined || area > maxArea) {\n        maxArea = area;\n        targetHeight = tHeight;\n        targetWidth = tWidth;\n        targetCols = colsAux;\n        targetRows = rowsAux;\n      }\n    }\n    return {\n      maxArea: maxArea,\n      targetCols: targetCols,\n      targetRows: targetRows,\n      targetHeight: targetHeight,\n      targetWidth: targetWidth,\n      ratio: targetHeight / targetWidth,\n    };\n  }\n\n   arrange(\n    children,\n    WIDTH,\n    HEIGHT,\n    offsetLeft,\n    offsetTop,\n    fixedRatio,\n    minRatio,\n    maxRatio,\n    animate,\n  ) {\n    let targetHeight;\n\n    const count = children.length;\n    let dimensions;\n\n    if (!fixedRatio) {\n      dimensions = this.getBestDimensions(minRatio, maxRatio, count, WIDTH, HEIGHT, targetHeight);\n    } else {\n      // Use the ratio of the first video element we find to approximate\n      const ratio = this.getVideoRatio(children.length > 0 ? children[0] : null);\n      dimensions = this.getBestDimensions(ratio, ratio, count, WIDTH, HEIGHT, targetHeight);\n    }\n\n    // Loop through each stream in the container and place it inside\n    let x = 0,\n      y = 0;\n    const rows = [];\n    let row;\n    // Iterate through the children and create an array with a new item for each row\n    // and calculate the width of each row so that we know if we go over the size and need\n    // to adjust\n    for (let i = 0; i < children.length; i++) {\n      if (i % dimensions.targetCols === 0) {\n        // This is a new row\n        row = {\n          children: [],\n          width: 0,\n          height: 0,\n        };\n        rows.push(row);\n      }\n      const elem = children[i];\n      row.children.push(elem);\n      let targetWidth = dimensions.targetWidth;\n      targetHeight = dimensions.targetHeight;\n      // If we're using a fixedRatio then we need to set the correct ratio for this element\n      if (fixedRatio) {\n        targetWidth = targetHeight / this.getVideoRatio(elem);\n      }\n      row.width += targetWidth;\n      row.height = targetHeight;\n    }\n    // Calculate total row height adjusting if we go too wide\n    let totalRowHeight = 0;\n    let remainingShortRows = 0;\n    for (let i = 0; i < rows.length; i++) {\n      row = rows[i];\n      if (row.width > WIDTH) {\n        // Went over on the width, need to adjust the height proportionally\n        row.height = Math.floor(row.height * (WIDTH / row.width));\n        row.width = WIDTH;\n      } else if (row.width < WIDTH) {\n        remainingShortRows += 1;\n      }\n      totalRowHeight += row.height;\n    }\n    if (totalRowHeight < HEIGHT && remainingShortRows > 0) {\n      // We can grow some of the rows, we're not taking up the whole height\n      let remainingHeightDiff = HEIGHT - totalRowHeight;\n      totalRowHeight = 0;\n      for (let i = 0; i < rows.length; i++) {\n        row = rows[i];\n        if (row.width < WIDTH) {\n          // Evenly distribute the extra height between the short rows\n          let extraHeight = remainingHeightDiff / remainingShortRows;\n          if (extraHeight / row.height > (WIDTH - row.width) / row.width) {\n            // We can't go that big or we'll go too wide\n            extraHeight = Math.floor((WIDTH - row.width) / row.width * row.height);\n          }\n          row.width += Math.floor(extraHeight / row.height * row.width);\n          row.height += extraHeight;\n          remainingHeightDiff -= extraHeight;\n          remainingShortRows -= 1;\n        }\n        totalRowHeight += row.height;\n      }\n    }\n    // vertical centering\n    y = (HEIGHT - totalRowHeight) / 2;\n    // Iterate through each row and place each child\n    for (let i = 0; i < rows.length; i++) {\n      row = rows[i];\n      // center the row\n      const rowMarginLeft = (WIDTH - row.width) / 2;\n      x = rowMarginLeft;\n      for (let j = 0; j < row.children.length; j++) {\n        const elem = row.children[j];\n\n        let targetWidth = dimensions.targetWidth;\n        targetHeight = row.height;\n        // If we're using a fixedRatio then we need to set the correct ratio for this element\n        if (fixedRatio) {\n          targetWidth = Math.floor(targetHeight / this.getVideoRatio(elem));\n        }\n        elem.style.position = 'absolute';\n        // $(elem).css('position', 'absolute');\n        const actualWidth =\n          targetWidth -\n          this.getCSSNumber(elem, 'paddingLeft') -\n          this.getCSSNumber(elem, 'paddingRight') -\n          this.getCSSNumber(elem, 'marginLeft') -\n          this.getCSSNumber(elem, 'marginRight') -\n          this.getCSSNumber(elem, 'borderLeft') -\n          this.getCSSNumber(elem, 'borderRight');\n\n        const actualHeight =\n          targetHeight -\n          this.getCSSNumber(elem, 'paddingTop') -\n          this.getCSSNumber(elem, 'paddingBottom') -\n          this.getCSSNumber(elem, 'marginTop') -\n          this.getCSSNumber(elem, 'marginBottom') -\n          this.getCSSNumber(elem, 'borderTop') -\n          this.getCSSNumber(elem, 'borderBottom');\n\n        this.positionElement(elem, x + offsetLeft, y + offsetTop, actualWidth, actualHeight, animate);\n        x += targetWidth;\n      }\n      y += targetHeight;\n    }\n  }\n\n filterDisplayNone(element) {\n    return element.style.display !== 'none';\n  }\n\n  updateLayout() {\n    if (this.layoutContainer.style.display === 'none') {\n      return;\n    }\n    let id = this.layoutContainer.id;\n    if (!id) {\n      id = 'OT_' + this.cheapUUID();\n      this.layoutContainer.id = id;\n    }\n\n    const HEIGHT =\n      this.getHeight(this.layoutContainer) -\n      this.getCSSNumber(this.layoutContainer, 'borderTop') -\n      this.getCSSNumber(this.layoutContainer, 'borderBottom');\n    const WIDTH =\n      this.getWidth(this.layoutContainer) -\n      this.getCSSNumber(this.layoutContainer, 'borderLeft') -\n      this.getCSSNumber(this.layoutContainer, 'borderRight');\n\n    const availableRatio = HEIGHT / WIDTH;\n\n    let offsetLeft = 0;\n    let offsetTop = 0;\n    let bigOffsetTop = 0;\n    let bigOffsetLeft = 0;\n\n    const bigOnes = Array.prototype.filter.call(\n      this.layoutContainer.querySelectorAll('#' + id + '>.' + this.opts.bigClass),\n      this.filterDisplayNone,\n    );\n    const smallOnes = Array.prototype.filter.call(\n      this.layoutContainer.querySelectorAll('#' + id + '>*:not(.' + this.opts.bigClass + ')'),\n      this.filterDisplayNone,\n    );\n\n    if (bigOnes.length > 0 && smallOnes.length > 0) {\n      let bigWidth, bigHeight;\n\n      if (availableRatio > this.getVideoRatio(bigOnes[0])) {\n        // We are tall, going to take up the whole width and arrange small\n        // guys at the bottom\n        bigWidth = WIDTH;\n        bigHeight = Math.floor(HEIGHT * this.opts.bigPercentage);\n        offsetTop = bigHeight;\n        bigOffsetTop = HEIGHT - offsetTop;\n      } else {\n        // We are wide, going to take up the whole height and arrange the small\n        // guys on the right\n        bigHeight = HEIGHT;\n        bigWidth = Math.floor(WIDTH * this.opts.bigPercentage);\n        offsetLeft = bigWidth;\n        bigOffsetLeft = WIDTH - offsetLeft;\n      }\n      if (this.opts.bigFirst) {\n        this.arrange(\n          bigOnes,\n          bigWidth,\n          bigHeight,\n          0,\n          0,\n          this.opts.bigFixedRatio,\n          this.opts.bigMinRatio,\n          this.opts.bigMaxRatio,\n          this.opts.animate,\n        );\n        this.arrange(\n          smallOnes,\n          WIDTH - offsetLeft,\n          HEIGHT - offsetTop,\n          offsetLeft,\n          offsetTop,\n          this.opts.fixedRatio,\n          this.opts.minRatio,\n          this.opts.maxRatio,\n          this.opts.animate,\n        );\n      } else {\n        this.arrange(\n          smallOnes,\n          WIDTH - offsetLeft,\n          HEIGHT - offsetTop,\n          0,\n          0,\n          this.opts.fixedRatio,\n          this.opts.minRatio,\n          this.opts.maxRatio,\n          this.opts.animate,\n        );\n        this.arrange(\n          bigOnes,\n          bigWidth,\n          bigHeight,\n          bigOffsetLeft,\n          bigOffsetTop,\n          this.opts.bigFixedRatio,\n          this.opts.bigMinRatio,\n          this.opts.bigMaxRatio,\n          this.opts.animate,\n        );\n      }\n    } else if (bigOnes.length > 0 && smallOnes.length === 0) {\n      this\n        // We only have one bigOne just center it\n        .arrange(\n          bigOnes,\n          WIDTH,\n          HEIGHT,\n          0,\n          0,\n          this.opts.bigFixedRatio,\n          this.opts.bigMinRatio,\n          this.opts.bigMaxRatio,\n          this.opts.animate,\n        );\n    } else {\n      this.arrange(\n        smallOnes,\n        WIDTH - offsetLeft,\n        HEIGHT - offsetTop,\n        offsetLeft,\n        offsetTop,\n        this.opts.fixedRatio,\n        this.opts.minRatio,\n        this.opts.maxRatio,\n        this.opts.animate,\n      );\n    }\n  }\n\n  initLayoutContainer(container, opts) {\n    this.opts = {\n      maxRatio: opts.maxRatio != null ? opts.maxRatio : 3 / 2,\n      minRatio: opts.minRatio != null ? opts.minRatio : 9 / 16,\n      fixedRatio: opts.fixedRatio != null ? opts.fixedRatio : false,\n      animate: opts.animate != null ? opts.animate : false,\n      bigClass: opts.bigClass != null ? opts.bigClass : 'OT_big',\n      bigPercentage: opts.bigPercentage != null ? opts.bigPercentage : 0.8,\n      bigFixedRatio: opts.bigFixedRatio != null ? opts.bigFixedRatio : false,\n      bigMaxRatio: opts.bigMaxRatio != null ? opts.bigMaxRatio : 3 / 2,\n      bigMinRatio: opts.bigMinRatio != null ? opts.bigMinRatio : 9 / 16,\n      bigFirst: opts.bigFirst != null ? opts.bigFirst : true,\n    };\n    this.layoutContainer = typeof container === 'string' ? $(container) : container;\n  }\n\n  setLayoutOptions(options) {\n    this.opts = options;\n  }\n}\nexport default OpenViduLayout;\n"]},"metadata":{},"sourceType":"module"}